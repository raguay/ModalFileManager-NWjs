{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "IconBase.svelte",
    "FileManager.svelte",
    "CommandPrompt.svelte",
    "DirectoryListing.svelte",
    "Entry.svelte",
    "ExtraPanel.svelte",
    "GitHub.svelte",
    "MessageBox.svelte",
    "Pane.svelte",
    "QuickSearch.svelte",
    "ResizeBorder.svelte",
    "StatusLine.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let title = null;\n  export let viewBox;\n</script>\n\n<style>\n  svg {\n    stroke: currentColor;\n    fill: currentColor;\n    stroke-width: 0;\n    width: 100%;\n    height: auto;\n    max-height: 100%;\n  }  \n</style>\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" {viewBox}>\n  {#if title}\n    <title>{title}</title>\n  {/if}\n  <slot />\n</svg>\n",
    "<svelte:window \n  on:keydown={(e) => {\n    lctrlKey = e.ctrlKey;\n    lshiftKey = e.shiftKey;\n    lmetaKey = e.metaKey;\n    if(skipKey && (e.key === 'Enter')) {\n      skipKey = false;\n      keyProcess.set(true);\n      localKeyProcess = true;\n    } else {\n      skipKey = false;\n      if(localKeyProcess) {\n        processKey(e);\n      }\n    }\n  }}\n  on:keyup={(e) => {\n    lctrlKey = e.ctrlKey;\n    lshiftKey = e.shiftKey;\n    lmetaKey = e.metaKey;\n  }}\n/>\n\n<div id='container'\n  style=\"background-color: {$theme.backgroundColor};\n         color: {$theme.textColor};\n         font-family: {$theme.font};\n         font-size: {$theme.fontSize};\"\n  on:mousemove={mouseMove}\n  on:mouseup={e => {\n    mdown = false;\n  }}\n  bind:this={containerDOM}\n>\n\n  {#if showGitHub}\n    <GitHub \n      on:closeGitHub={(e) => {\n        toggleGitHub();\n      }}\n    />\n  {/if}\n\n  {#if showCommandPrompt}\n    <CommandPrompt \n      commands={commands}\n      on:closeCommandPrompt={(e) => {\n        showCommandPrompt = false;\n        if(!showMessageBox) {\n          keyProcess.set(true);\n          localKeyProcess = true;\n        }\n        if(e.detail.skip) skipKey = true;\n      }}\n    />\n  {/if}\n\n  {#if showMessageBox}\n    <MessageBox\n      config={msgBoxConfig}\n      spinners={msgBoxSpinners}\n      items={msgBoxItems}\n      on:msgReturn={msgReturn}\n      on:closeMsgBox={(e) => { \n        showMessageBox = false;\n        keyProcess.set(true);\n        localKeyProcess = true;\n        if(e.detail.skip) skipKey = true;\n      }}\n    />\n  {/if}\n\n  {#if showQuickSearch}\n    <QuickSearch\n      leftDOM={leftDOM}\n      rightDOM={rightDOM}\n      leftEntries={leftEntries}\n      rightEntries={rightEntries}\n      on:changeEntries={qsChangeEntries}\n      on:closeQuickSearch={(e) => { \n        showQuickSearch = false;\n        keyProcess.set(true);\n        localKeyProcess = true;\n        if(e.detail.skip) skipKey = true;\n      }}\n    />\n  {/if}\n\n  <div id='leftSide'\n       bind:this={leftDOM}>\n    {#if (localCurrentCursor.pane === 'right')&&(showExtra)}\n      <ExtraPanel\n      />\n    {:else}\n      <DirectoryListing\n        path={localLeftDir}\n        edit={setEditDirFlagLeft}\n        on:dirChange={(e) => { changeDir(e.detail, 'left'); setEditDirFlagLeft = false; }}\n      />\n      <Pane \n        pane='left'\n        entries={leftEntries}\n        utilities={localLeftDir.fileSystem}\n        on:changeDir={(e) => { changeDir(e.detail.dir, e.detail.pane); }}\n        on:openFile={(e) => { openFile(e.detail.entry); }}\n      />\n    {/if}\n  </div>\n  <ResizeBorder \n    on:mouseDown={(e) => {mdown = e.detail;}}\n  />\n  <div id='rightSide'\n       bind:this={rightDOM}\n  >\n    {#if (localCurrentCursor.pane === 'left')&&(showExtra)}\n      <ExtraPanel\n      />\n    {:else}\n      <DirectoryListing\n        path={localRightDir}\n        edit={setEditDirFlagRight}\n        on:dirChange={(e) => { changeDir(e.detail, 'right'); setEditDirFlagRight = false; }}\n      />\n      <Pane \n        pane='right'\n        entries={rightEntries}\n        utilities={localRightDir.fileSystem}\n        on:changeDir={(e) => {changeDir(e.detail.dir, e.detail.pane); }}\n        on:openFile={(e) => { openFile(e.detail.entry); }}\n      />\n    {/if}\n  </div>\n  <StatusLine \n  />\n</div>\n\n<style>\n  #leftSide {\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n    margin: 0px;\n    width: 50%;\n  }\n  \n  #rightSide {\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n    margin: 0px;\n    width: 50%;\n  }\n\n\n  :global(body) {\n    padding: 0px;\n    margin: 0px;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    user-select: none;\n  }\n\n  #container {\n    padding: 0px;\n    margin: 0px;\n    display: flex;\n    flex-direction: row;\n    position: fixed;\n    top: 0px;\n    bottom: 34px;\n    width: 100%;\n  }\n</style>\n\n<script>\n  import { onMount, tick } from 'svelte';\n  import { get } from 'svelte/store';\n  import Pane from './components/Pane.svelte';\n  import MessageBox from './components/MessageBox.svelte';\n  import DirectoryListing from './components/DirectoryListing.svelte';\n  import StatusLine from './components/StatusLine.svelte';\n  import ResizeBorder from './components/ResizeBorder.svelte';\n  import QuickSearch from './components/QuickSearch.svelte';\n  import ExtraPanel from './components/ExtraPanel.svelte';\n  import CommandPrompt from './components/CommandPrompt.svelte';\n  import GitHub from './components/GitHub.svelte';\n  import { currentCursor } from './stores/currentCursor.js';\n  import { currentLeftFile } from './stores/currentLeftFile.js';\n  import { currentRightFile } from './stores/currentRightFile.js';\n  import { theme } from './stores/theme.js';\n  import { inputState } from './stores/inputState.js';\n  import { leftDir } from './stores/leftDir.js';\n  import { rightDir } from './stores/rightDir.js';\n  import { keyProcess } from './stores/keyProcess.js';\n  import { config } from './stores/config.js';\n  import { dirHistory } from './stores/dirHistory.js';\n  import { directoryListeners } from './stores/directoryListeners.js';\n  import { stateMapColors } from './stores/stateMapColors.js';\n  import commands from './modules/commands.js';\n  import filesystems from './modules/filesystems';\n  import extensions from './modules/extensions.js';\n  import macOS from './modules/macOS.js';\n  import linux from './modules/linux.js';\n  import windows from './modules/windows.js';\n  \n  const os = require('os');\n\n  let showMessageBox = false;\n  let showQuickSearch = false;\n  let msgBoxConfig = {};\n  let msgBoxSpinners = [];\n  let msgBoxItems = null;\n  let msgCallBack = (e) => {};\n  let configDir = \"\";\n  let setEditDirFlagLeft = false;\n  let setEditDirFlagRight = false;\n  let showExtra = false;\n  let showCommandPrompt = false;\n  let skipKey = false;\n  let leftEntries;\n  let rightEntries;\n  let localCurrentCursor = {\n    pane: 'left',\n    entry: {}\n  };\n  let localCurrentLeftFile;\n  let localCurrentRightFile;\n  let localTheme;\n  let localState = 'normal';\n  let localLeftDir = {\n    fileSystemType: 'macOS',\n    fileSystem: null,\n    path: 'left'\n  };\n  let localRightDir = {\n    fileSystemType: 'macOS',\n    fileSystem: null,\n    path: 'right'\n  };\n  let rightDOM;\n  let leftDOM;\n  let containerDOM;\n  let localKeyProcess;\n  let mdown = false;\n  let lastError = null;\n  let userEditor = '.myeditorchoice';\n  let localFS = null;\n  let localFStype = '';\n  let osNames = ['macOS', 'linux', 'windows'];\n  let stateMaps = [];\n  let localStateMapColors;\n  let localDirListeners = null;\n  let showGitHub = false;\n  let numberAcc = '';\n  let lshiftKey = false;\n  let lctrlKey = false;\n  let lmetaKey = false;\n  let lastCommand = '';\n  let flagFilter = 1;\n\n  onMount(() => {\n    // \n    // Get the local file system utilities.\n    // \n    localFStype = getOS();\n    switch(localFStype) {\n      case osNames[0]:\n        localFS = macOS;\n        break;\n      case osNames[1]: \n        localFS = linux;\n        break;\n      case osNames[2]: \n        localFS = windows;\n        break;\n      default:\n        localFS = macOS;\n    }\n\n    //\n    // Initialize local.\n    //\n    localFS.init();\n    localFS.setDirFirst(true);\n\n    // \n    // Setup the configuration directory.\n    //\n    configDir = localFS.getConfigDir();\n    if(!localFS.dirExists(configDir)) {\n      localFS.makeDir(configDir);\n      localFS.makeDir({\n        dir: configDir,\n        name: 'extensions',\n        fileSystem: localFS\n      });\n    }\n\n    // \n    // Set the configuration store.\n    //\n    config.set({\n      configDir: configDir,\n      localFS: localFS\n    });\n\n    //\n    // Setup the directory listeners.\n    //\n    var unsubscribeDirListeners = directoryListeners.subscribe(value => {\n      localDirListeners = value;\n    })\n\n    //\n    // Here, we are subscribing to the different stores and setting their \n    // default values;\n    //\n    var unsubscribeLeftDir = leftDir.subscribe(value => {\n      localLeftDir = value;\n    });\n    var unsubscribeRightDir = rightDir.subscribe(value => {\n      localRightDir = value;\n    });\n    \n    //\n    // Setup the application to be in the user's home directory.\n    //\n    localLeftDir.path = localFS.getHomeDir();\n    localLeftDir.fileSystemType = localFStype;\n    localLeftDir.fileSystem = localFS;\n    localRightDir.path = localFS.getHomeDir();\n    localRightDir.fileSystemType = localFStype;\n    localRightDir.fileSystem = localFS;\n\n    //\n    // Get the files.\n    //\n    leftEntries = localFS.getDirList(localLeftDir.path);\n    rightEntries = localFS.getDirList(localRightDir.path);\n\n    //\n    // Set the stores to their proper value.\n    //\n    leftDir.set(localLeftDir);\n    rightDir.set(localRightDir);\n \n    var unsubscribeCurrentCursor = currentCursor.subscribe(value => {\n      localCurrentCursor = value;\n    });\n    currentCursor.set({\n      pane: 'left',\n      entry: leftEntries[0]\n    });\n    var unsubscribeCurrentLeftFile = currentLeftFile.subscribe(value => {\n      localCurrentLeftFile = value;\n    });\n    currentLeftFile.set({\n      entry: leftEntries[0]\n    });\n    var unsubscribeCurrentRightFile = currentRightFile.subscribe(value => {\n      localCurrentRightFile = value;\n    });\n    currentRightFile.set({\n      entry: rightEntries[0]\n    });\n    var unsubscribeTheme = theme.subscribe(value => {\n      // \n      // Make sure a proper theme is being set.\n      // \n      if(typeof value.backgroundColor !== 'undefined') {\n        //\n        // Keep a local copy.\n        // \n        localTheme = value;\n \n        // \n        // Save the new theme values.\n        //\n        localFS.writeFile(localFS.appendPath(configDir, 'theme.json'), JSON.stringify(value));\n\n        //\n        // Set the default state map colors.\n        //\n        localStateMapColors['normal'] = localTheme.normalbackgroundColor;\n        localStateMapColors['insert'] = localTheme.insertbackgroundColor;\n        localStateMapColors['visual'] = localTheme.visualbackgroundColor;\n        stateMapColors.set(localStateMapColors);\n      }\n    });\n    var unsubscriptStateMapColors = stateMapColors.subscribe(value => {\n      localStateMapColors = value;\n    });\n    var unsubscribeInputState = inputState.subscribe(value => {\n      localState = value;\n    });\n    inputState.set(localState);\n    var unsubscribeKeyProcess = keyProcess.subscribe(value => {\n      localKeyProcess = value;\n      console.log('Key Process changed...');\n      console.log(value);\n    });\n\n    // \n    // Setup the directory history.\n    //\n    var dhist = get(dirHistory);\n    dhist.loadHistory();\n    dirHistory.set(dhist);\n\n    //\n    // Setup the default commands.\n    //\n    installDefaultCommands();\n\n    // \n    // load the theme.\n    //\n    if(!localFS.fileExists(localFS.appendPath(configDir, 'theme.json'))) {\n      // \n      // Setup the Dracula Pro as default theme colors:\n      //\n      localTheme = {\n        font: \"Fira Code, Menlo\",\n        fontSize: \"12pt\",\n        cursorColor: '#363443',\n        selectedColor: '#454158',\n        backgroundColor: '#22212C',\n        textColor: '#F8F8F2',\n        borderColor: '#1B1A23',\n        normalbackgroundColor: \"#80FFEA\",\n        insertbackgroundColor: \"#8AFF80\",\n        visualbackgroundColor: \"#FF80BF\",\n        commentColor: \"#7970A9\",\n        Cyan: \"#80FFEA\",\n        Green: \"#8AFF80\",\n        Orange: \"#FFCA80\",\n        Pink: \"#FF80BF\",\n        Purple: \"#9580FF\",\n        Red: \"#FF9580\",\n        Yellow: \"#FFFF80\"\n      };\n\n      // \n      // Save the default theme.\n      //\n      localFS.writeFile(localFS.appendPath(configDir, 'theme.json'), JSON.stringify(localTheme));\n    } else {\n      //\n      // Load the theme saved.\n      //\n      localTheme = JSON.parse(localFS.readFile(localFS.appendPath(configDir, 'theme.json')));\n    }\n\n    //\n    // Get the stateMapColors setup.\n    //\n    localStateMapColors['normal'] = localTheme.normalbackgroundColor;\n    localStateMapColors['insert'] = localTheme.insertbackgroundColor;\n    localStateMapColors['visual'] = localTheme.visualbackgroundColor;\n    stateMapColors.set(localStateMapColors);\n\n    //\n    // Set the theme.\n    //\n    theme.set(localTheme);\n\n    //\n    // Setup the user editor data file.\n    //\n    userEditor = localFS.appendPath(localFS.getHomeDir(), '.myeditorchoice');\n    if(!localFS.fileExists(userEditor)) {\n      if(!localFS.fileExists(localFS.appendPath(configDir, '.myeditorchoice'))) {\n        // \n        // They don't have this file setup. TODO: Set it up or not?\n        //\n      } else {\n        // \n        // Use this file then.\n        // \n        userEditor = localFS.appendPath(configDir, '.myeditorchoice');\n      }\n    }\n    \n    //\n    // Setup Extensions.\n    //\n    const extDir = localFS.appendPath(configDir, 'extensions');\n    extensions.setExtensionDir(extDir);\n    extensions.setCommands(commands);\n    extensions.setFileSystems(filesystems);\n    extensions.load(localFS);\n    installDefaultExtCommands();\n    extensions.init();\n\n    //\n    // Setup State Maps. This has to be after setting up extensions in case \n    // an extension command is being used.\n    //\n    loadKeyMaps();\n    extensions.installKeyMaps();\n\n    //\n    // return a command to unsubscribe from everything.\n    //\n    return(() => {\n      unsubscribeKeyProcess();\n      unsubscribeInputState();\n      unsubscribeTheme();\n      unsubscribeCurrentRightFile();\n      unsubscribeCurrentLeftFile();\n      unsubscribeCurrentCursor();\n      unsubscribeRightDir();\n      unsubscribeLeftDir();\n      unsubscribeDirListeners();\n      unsubscriptStateMapColors();\n    })\n  });\n\n  function getOS() {\n    var result = osNames[0];\n    var platform = os.platform();\n    switch(platform) { \n        case 'aix': \n            result = osNames[1]\n            break; \n        case 'android': \n            result = osNames[1]\n            break; \n        case 'darwin': \n            result = osNames[0]\n            break; \n        case 'freebsd': \n            result = osNames[1]\n            break; \n        case 'linux': \n            result = osNames[1]\n            break; \n        case 'openbsd': \n            result = osNames[1]\n            break; \n        case 'sunos': \n            result = osNames[1]\n            break; \n        case 'win32':\n            result = osNames[2]\n            break;     \n        default: \n            result = osNames[1]\n    } \n    return result;\n  }\n\n  function installDefaultExtCommands() {\n    extensions.addExtCommand('setCursor','Set the cursor to the file name given in the current panel.', setCursor);\n    extensions.addExtCommand('cursorToPane', 'Set the cursor to the pane given. Either \"left\" or \"right\", cursorToPane');\n    extensions.addExtCommand('changeDir', 'Change the directory of a pane and make it the current.', changeDir);\n    extensions.addExtCommand('getLeftFile', 'Get the current left file information.', getLeftFile);\n    extensions.addExtCommand('getRightFile', 'Get the current right file information.', getRightFile);\n    extensions.addExtCommand('getCursor', 'Get the current cursor.', getCursor);\n    extensions.addExtCommand('addKeyboardShort', 'Add a keyboard shortcut.', addKeyboardShort);\n    extensions.addExtCommand('setTheme', 'Set the theme to the values given.', setTheme);\n    extensions.addExtCommand('getTheme', 'Get the current theme values.', getTheme);\n    extensions.addExtCommand('getOS', 'Get the local OS name.', getOS);\n    extensions.addExtCommand('addDirectoryListener', 'Register a function that will be called with each change in directory.', addDirectoryListener);\n    extensions.addExtCommand('getLastError', 'returns the last error.', getLastError);\n    extensions.addExtCommand('getSelectedFiles', 'Returns a list of Entries that have been selected', getSelectedFiles);\n    extensions.addExtCommand('getCurrentFile', 'Get the current file.', getCurrentFile);\n    extensions.addExtCommand('getCurrentPane', 'Get the pane that is currently active.', getCurrentPane);\n    extensions.addExtCommand('changeDir', 'Change the current directory for a pane.', changeDir);\n    extensions.addExtCommand('addSpinner', 'Add a message box spinner value.', addSpinner);\n    extensions.addExtCommand('updateSpinner', 'Update a message box spinner value.', updateSpinner);\n    extensions.addExtCommand('removeSpinner', 'Remove a message box spinner value.', removeSpinner);\n    extensions.addExtCommand('keyProcessor', 'Send a keystroke to be processed.', keyProcessor);\n    extensions.addExtCommand('stringKeyProcessor', 'Send a string of keystrokes to be processed.', stringKeyProcessor);\n    extensions.addExtCommand('askQuestion', 'Ask a question and get the response.', askQuestion);\n    extensions.addExtCommand('pickItem', 'Choose from a list of items.', pickItem);\n    extensions.addExtCommand('showMessage', 'Show a message to the user.', showMessage);\n    extensions.addExtCommand('createNewMode', 'Allows the creation of a new mode for keyboard commands.', createNewMode);\n    extensions.addExtCommand('changeMode', 'Change to mode given.', changeMode);\n  }\n\n  function installDefaultCommands() {\n    //\n    // Add all built in commands to the commands object.\n    //\n    commands.addCommand('Move Cursor Down','moveCursorDown','Move the cursor down one line.',moveCursorDown);\n    commands.addCommand('Move Cursor Down with Selection', 'moveCursorDownWithSelect','This will select the current file and move the cursor down one line.',moveCursorDownWithSelect);\n    commands.addCommand('Move Cursor Up','moveCursorUp','This will move the cursor up one line',moveCursorUp);\n    commands.addCommand('Move Cursor Up with Selection','moveCursorUpWithSelect','This will move select the current entry and move the cursor up one line.',moveCursorUpWithSelect);\n    commands.addCommand('Change Mode to Normal','changeModeNormal','Set the normal mode.',changeModeNormal);\n    commands.addCommand('Change Mode to Insert','changeModeInsert','Set the insert mode.',changeModeInsert);\n    commands.addCommand('Change Mode to Visual','changeModeVisual','Set the visual mode.',changeModeVisual);\n    commands.addCommand('Cursor to Next Pane','cursorToNextPane','This will move the cursore to the opposite pane.',cursorToNextPane);\n    commands.addCommand('Action Entry','actionEntry','This will open a file or go into a directory.',actionEntry);\n    commands.addCommand('Go Up a Directory','goUpDir','Go to the parent directory.',goUpDir);\n    commands.addCommand('Go Down a Directory','goDownDir','If the current entry is a directory, go to it.',goDownDir);\n    commands.addCommand('Go to Bottom Entry','goBottomFile','Move the cursor to the bottom most file.',goBottomFile);\n    commands.addCommand('Go to Top Entry','goTopFile','Move the cursor to the top most file.',goTopFile);\n    commands.addCommand('Delete Entries', 'deleteEntries', 'Delete all selected entries or the one under the cursor', deleteEntries);\n    commands.addCommand('Copy Entries', 'copyEntries', 'Copy the selected entries or the one under the cursor to the other pane.', copyEntries);\n    commands.addCommand('Move Entries', 'moveEntries', 'Move the selected entries or the one under the cursor to the other pane.', moveEntries);\n    commands.addCommand('Edit Entry', 'editEntry', 'Opens the file under the cursor in the editor specified. This command assumes using a Text/Code editor on the file.', editEntry);\n    commands.addCommand('Duplicate Entry', 'duplicateEntry', 'Make a copy of the current entry with \"_copy\" added to it.', duplicateEntry);\n    commands.addCommand('New File', 'newFile', 'Create a new file in the current pane.', newFile);\n    commands.addCommand('New Directory', 'newDirectory', 'Create a new directory in the current pane.', newDirectory);\n    commands.addCommand('Rename Entry', 'renameEntry', 'Rename the current entry.', renameEntry);\n    commands.addCommand('Swap Panels', 'swapPanels', 'Swap the panel contents.', swapPanels);\n    commands.addCommand('Toggle Quick Search', 'toggleQuickSearch', 'Show/Hide the Quick Search panel.', toggleQuickSearch);\n    commands.addCommand('Reload Pane', 'reloadPane', 'Reload the Current Pane.', reloadPane);\n    commands.addCommand('Edit Directory', 'editDirLoc', 'Edit the current panels directory.', editDirLoc);\n    commands.addCommand('Toggle Extra Panel', 'toggleExtraPanel', 'Toggles the showing of the extra panel.', toggleExtraPanel);\n    commands.addCommand('Toggle Command Prompt', 'toggleCommandPrompt', 'Toggles showing the command prompt.', toggleCommandPrompt);\n    commands.addCommand('Toggle GitHub Importer', 'toggleGitHub', 'Toggles the showing of the GitHub importer.', toggleGitHub);\n    commands.addCommand('Refresh Panes', 'refreshPanes', 'Reloads both panes.', refreshPanes);\n    commands.addCommand('Refresh Right Pane', 'refreshRightPane', 'Refresh the Right Pane', refreshRightPane);\n    commands.addCommand('Refresh Left Pane', 'refreshLeftPane', 'Reloads the Left Pane.', refreshLeftPane);\n    commands.addCommand('Rerun Last Command', 'reRunLastCommand', 'Runs the last command with it\\'s number.', reRunLastCommand);\n    commands.addCommand('Toggle Filter', 'toggleFilter', 'Toggles the show all and default filters.', toggleFilter );\n    commands.addCommand('Show All Filter', 'setShowAllFilter', 'Sets to show all Entries.', setShowAllFilter);\n    commands.addCommand('Show Only Non-System Files/Folders', 'setDefaultFilter', 'Sets the default filter of not showing system files/folders.', setDefaultFilter);\n    commands.addCommand('Open in Opposite Panel', 'openOppositePanel', 'Set the opposite panel to the directory under the current cursor or the directory of the current cursor.', openOppositePanel);\n  }\n  \n  function processKey(e) {\n    //\n    // Stop the system for propgating the keystroke.\n    //\n    e.preventDefault();\n\n    // \n    // Send to the processor.\n    //\n    keyProcessor(e.key, lctrlKey, lshiftKey, lmetaKey);\n  }\n\n  function stringKeyProcessor(str) {\n    for(var i=0; i < str.length; i++) {\n      if((str[i] >= 'A')&&(str[i] <= 'Z')) {\n        keyProcessor(str[i], false, true, false);\n      } else {\n        keyProcessor(str[i], false, false, false);\n      }\n    }\n  }\n\n  function reRunLastCommand() {\n    stringKeyProcessor(lastCommand);\n  }\n\n  function keyProcessor(key, ctrlKey, shiftKey, metaKey) {\n\n    if((key >= 0)&&(key <=9)) {\n      // \n      // It is a number prefixing a command. Get the digits for using in the command.\n      // \n      numberAcc += key;\n    } else {\n      //\n      // Get the command for the current state in the stateMaps.\n      //\n      \n      const command = getCommand(stateMaps[localState], key, ctrlKey, shiftKey, metaKey);\n      \n      // \n      // Figure the number of times to run the command.\n      // \n      var num = parseInt(numberAcc,10);\n      if((num === 0)||(isNaN(num))) num = 1;\n      if(command.name !== 'reRunLastCommand') lastCommand = numberAcc + key;\n\n      //\n      // Run the command.\n      //\n      try {\n        do {\n          command.command();\n        } while((num--) > 1);\n      } catch(e) {\n        //\n        // Something happened in the command. Tell about it.\n        //\n        lastError = e;\n        console.log(e);\n      }\n      numberAcc = '';\n    }\n  }\n\n function createNewMode(name, color) {\n    stateMaps[name] = [];\n    localStateMapColors[name] = color;\n    stateMapColors.set(localStateMapColors);\n }\n\n function getCommand(map, key, ctrlKey, shiftKey, metaKey) {\n     var result = {\n      command: () => {},\n      name: 'empty'\n    };\n    var rmap = map.find(item => ((item.key == key) && (item.meta == metaKey) && (item.ctrl == ctrlKey) && (item.shift == shiftKey)));\n    if(typeof rmap !== 'undefined') {\n      result = rmap;\n    }\n    return result;\n  }\n\n  function setCursor(fname){\n    var index = 0;\n    if(localCurrentCursor.pane == 'left') {\n      index = leftEntries.findIndex(item => item.name == fname);\n      if(index === -1) index = 0;\n      currentCursor.set({\n        pane: 'left',\n        entry: leftEntries[index]\n      });\n      currentLeftFile.set({\n        entry: leftEntries[index]\n      });\n    } else {\n      index = rightEntries.findIndex(item => item.name == fname);\n      if(index === -1) index = 0;\n      currentCursor.set({\n        pane: 'right',\n        entry: rightEntries[index]\n      });\n      currentRightFile.set({\n        entry: rightEntries[index]\n      });\n    }\n  }\n\n  function moveCursorDown() {\n    var index = 0;\n    if(localCurrentCursor.pane.includes('left')) {\n      if(leftEntries.length !== 0) {\n        index = leftEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index < (leftEntries.length-1)) {\n          index += 1;\n        }\n        currentCursor.set({\n          pane: 'left',\n          entry: leftEntries[index]\n        });\n        currentLeftFile.set({\n          entry: leftEntries[index]\n        });\n      }\n    } else {\n      if(rightEntries.length !== 0) {\n        index = rightEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index < (rightEntries.length-1)) {\n          index += 1;\n        }\n        currentCursor.set({\n          pane: 'right',\n          entry: rightEntries[index]\n        });\n        currentRightFile.set({\n          entry: rightEntries[index]\n        });\n      }\n    }\n  }\n\n  function moveCursorDownWithSelect() {\n    var index = 0;\n    if(localCurrentCursor.pane.includes('left')) {\n      if(leftEntries.length !== 0 ) {\n        index = leftEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index === -1) index = 0;\n        var entry = leftEntries[index];\n        entry.selected = !entry.selected;\n        leftEntries[index] = entry;\n        if(index < (leftEntries.length-1)) {\n          index += 1;\n        }\n        entry = leftEntries[index];\n        currentCursor.set({\n          pane: 'left',\n          entry: entry\n        });\n        currentLeftFile.set({\n          entry: entry\n        });\n      }\n    } else {\n      if(rightEntries.length !== 0) {\n        index = rightEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index === -1) index = 0;\n        var entry = rightEntries[index];\n        entry.selected = !entry.selected;\n        rightEntries[index] = entry;\n        if(index < (rightEntries.length-1)) {\n          index += 1;\n        }\n        entry = rightEntries[index];\n        currentCursor.set({\n          pane: 'right',\n          entry: entry\n        });\n        currentRightFile.set({\n          entry: entry\n        });\n      }\n    }\n  }\n\n  function moveCursorUp() {\n    var index = 0;\n    if(localCurrentCursor.pane.includes('left')) {\n      if(leftEntries.length !== 0) {\n        index = leftEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index > 0) {\n          index -= 1;\n        }\n        if(index === -1) index = 0;\n        currentCursor.set({\n          pane: 'left',\n          entry: leftEntries[index]\n        });\n        currentLeftFile.set({\n          entry: leftEntries[index]\n        });\n      }\n    } else {\n      if(rightEntries.length !== 0) {\n        index = rightEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index > 0) {\n          index -= 1;\n        }\n        if(index === -1) index = 0;\n        currentCursor.set({\n          pane: 'right',\n          entry: rightEntries[index]\n        });\n        currentRightFile.set({\n          entry: rightEntries[index]\n        });\n      }\n    }\n  }\n\n  function moveCursorUpWithSelect() {\n    var index = 0;\n    if(localCurrentCursor.pane.includes('left')) {\n      if(leftEntries.length !== 0) {\n        index = leftEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index === -1) index = 0;\n        var entry = leftEntries[index];\n        entry.selected = !entry.selected;\n        leftEntries[index] = entry;\n        if(index > 0) {\n          index -= 1;\n        }\n        entry = leftEntries[index];\n        currentCursor.set({\n          pane: 'left',\n          entry: entry\n        });\n        currentLeftFile.set({\n          entry: entry\n        });\n      }\n    } else {\n      if(rightEntries.length !== 0) {\n        index = rightEntries.findIndex(item => item.name == localCurrentCursor.entry.name);\n        if(index === -1) index = 0;\n        var entry = rightEntries[index];\n        entry.selected = !entry.selected;\n        rightEntries[index] = entry;\n        if(index > 0) {\n          index -= 1;\n        }\n        entry = rightEntries[index];\n        currentCursor.set({\n          pane: 'right',\n          entry: entry\n        });\n        currentRightFile.set({\n          entry: entry\n        });\n      }\n    }\n  }\n\n  function changeMode(newMode) {\n    inputState.set(newMode);\n    localState = newMode;\n  }\n\n  function changeModeNormal() {\n    changeMode('normal');\n  }\n  \n  function changeModeInsert() {\n    changeMode('insert');\n  }\n  \n  function changeModeVisual() {\n    changeMode('visual');\n  }\n\n  function openOppositePanel() {\n    var nEntry = localCurrentCursor.entry.dir;\n    if(localCurrentCursor.entry.type === 1) {\n      nEntry = localCurrentCursor.entry.fileSystem.appendPath(localCurrentCursor.entry.dir, localCurrentCursor.entry.name);\n    }\n    if(localCurrentCursor.pane === 'right') {\n      changeDir({\n        path: nEntry,\n        cursor: true\n      },'left');\n    } else {\n      changeDir({\n        path: nEntry,\n        cursor: true\n      },'right');\n    }\n  }\n\n  function cursorToPane(npane) {\n    if(npane == 'right') {\n      currentCursor.set({\n        pane: 'right',\n        entry: localCurrentRightFile.entry\n      })\n    } else {\n      currentCursor.set({\n        pane: 'left',\n        entry: localCurrentLeftFile.entry\n      })\n    }\n  }\n\n  function cursorToNextPane() {\n    if(localCurrentCursor.pane == 'left') {\n      currentCursor.set({\n        pane: 'right',\n        entry: localCurrentRightFile.entry\n      })\n    } else {\n      currentCursor.set({\n        pane: 'left',\n        entry: localCurrentLeftFile.entry\n      })\n    }\n  }\n\n  function mouseMove(e) {\n    if(mdown) {\n      leftDOM.style.width = e.clientX + 'px';\n      rightDOM.style.width = (containerDOM.clientWidth - (e.clientX+10)) + 'px';\n    }\n  }\n\n  function reloadPane() {\n    changeDir({\n      path: localCurrentCursor.entry.dir,\n      cursor: true\n    }, localCurrentCursor.pane);\n  }\n\n  function changeDir(dirOb, npane) {\n    var ndir = dirOb.path;\n    if(typeof npane === 'undefined') npane = localCurrentCursor.pane;\n    if(typeof dirOb.cursor === 'undefined') dirOb.cursor = true;\n    if(npane == 'left') {\n      leftDir.set({path: ndir, fileSystemType: localLeftDir.fileSystemType, fileSystem: localLeftDir.fileSystem});\n      leftEntries = localLeftDir.fileSystem.getDirList(ndir);\n      if(leftEntries.length !== 0) {\n        currentLeftFile.set({ entry: leftEntries[0]});\n        if(dirOb.cursor) currentCursor.set({ entry: leftEntries[0], pane: npane});\n      } else {\n        currentLeftFile.set({ entry: {\n          name: '',\n          size: '',\n          type: localLeftDir.fileSystemType,\n          fileSystem: localLeftDir.fileSystem,\n          dir: ndir,\n          datetime: '',\n          selected: false\n        }});\n        if(dirOb.cursor) {\n          currentCursor.set({ entry: {\n            name: '',\n            size: '',\n            type: localLeftDir.fileSystemType,\n            fileSystem: localLeftDir.fileSystem,\n            dir: ndir,\n            datetime: '',\n            selected: false\n          }, pane: npane});\n        }\n      }\n    } else {\n      rightDir.set({path: ndir, fileSystemType: localRightDir.fileSystemType, fileSystem: localRightDir.fileSystem});\n      rightEntries = localRightDir.fileSystem.getDirList(ndir);\n      if(rightEntries.length !== 0) {\n        currentRightFile.set({ entry: rightEntries[0]});\n        if(dirOb.cursor) currentCursor.set({ entry: rightEntries[0], pane: npane});\n      } else {\n        currentRightFile.set({ entry: {\n          name: '',\n          size: '',\n          type: localRightDir.fileSystemType,\n          fileSystem: localRightDir.fileSystem,\n          dir: ndir,\n          datetime: '',\n          selected: false\n        }});\n        if(dirOb.cursor) {\n          currentCursor.set({ entry: {\n            name: '',\n            size: '',\n            type: localRightDir.fileSystemType,\n            fileSystem: localRightDir.fileSystem,\n            dir: ndir,\n            datetime: '',\n            selected: false\n          }, pane: npane});\n        }\n      }\n    }\n  }\n\n  function openFile(entry) {\n    entry.fileSystem.openFile(entry.dir, entry.name);\n  }\n\n  function actionEntry() {\n    if(localCurrentCursor.entry.type === 0) {\n      //\n      // It is a file. Open it.\n      //\n      openFile(localCurrentCursor.entry);\n    } else {\n      //\n      // It is a directory. Go down a level.\n      //\n      var ndir = localCurrentCursor.entry.fileSystem.appendPath(localCurrentCursor.entry.dir, localCurrentCursor.entry.name);\n      changeDir({\n        path: ndir,\n        cursor: true\n      }, localCurrentCursor.pane);\n    }\n  }\n  \n  function goUpDir() {\n    var sep = localCurrentCursor.entry.fileSystem.pathSep();\n    var parts = localCurrentCursor.entry.dir.split(sep);\n    if(parts.length > 0) {\n      var newDir = parts.slice(0,parts.length-1).join(sep);\n      if(newDir == '') newDir = sep;\n      changeDir({\n        path: newDir,\n        cursor: true \n      }, localCurrentCursor.pane);\n      setCursor(parts[parts.length-1]);\n    }\n  }\n\n  function goDownDir() {\n    if(localCurrentCursor.entry.type === 1) {\n      var newDir = localCurrentCursor.entry.fileSystem.appendPath(localCurrentCursor.entry.dir, localCurrentCursor.entry.name);\n      changeDir({\n        path: newDir,\n        cursor: true \n      }, localCurrentCursor.pane);\n    }\n  }\n\n  function goBottomFile() {\n    if(localCurrentCursor.pane == 'left') {\n      if(leftEntries.length !== 0) {\n        const last = leftEntries[leftEntries.length - 1];\n        setCursor(last.name);\n      }\n    } else {\n      if(rightEntries.length !== 0) {\n        const last = rightEntries[rightEntries.length - 1];\n        setCursor(last.name);\n      }\n    }\n  }\n\n  function goTopFile() {\n    if(localCurrentCursor.pane == 'left') {\n      if(leftEntries.length !== 0) {\n        var top = leftEntries[0];\n        setCursor(top.name);\n      }\n    } else {\n      if(rightEntries.length !== 0) {\n        var top = rightEntries[0];\n        setCursor(top.name);\n      }\n    }\n  }\n\n  function getCurrentFile() {\n    return(localCurrentCursor.entry);\n  }\n\n  function getCurrentPane() {\n    return(localCurrentCursor.pane);\n  }\n\n  function getLastError() {\n    return(lastError);\n  }\n\n  function deleteEntries() {\n    var entries = getSelectedFiles();\n    var sel = true;\n    if(entries.length === 0) {\n      //\n      // Get the entry at the current cursor\n      //\n      entries.push(localCurrentCursor.entry);\n      sel = false;\n    }\n    msgBoxConfig = {\n      title: \"Deleting Entries\",\n      noShowButton: true\n    };\n    msgBoxItems = [];\n    msgBoxItems.push({\n        type: 'label',\n        name: 'msgboxMain',\n        for: 'progress1',\n        text: 'Deleting ' + entries.length + ' Entries...'\n      });\n    msgBoxItems.push({\n        type: 'spinner',\n        name: 'progress1',\n        value: 1\n      });\n    msgBoxItems = msgBoxItems;\n    msgCallBack = (e) => { showMessageBox = false; };\n    addSpinner('progress1', 1);\n \n    entries.forEach((item, key, arr) => {\n      item.fileSystem.deleteEntries(item, (err, stdout)=>{\n        if(key >= (arr.length-1)) {\n          showMessageBox = false;\n          keyProcess.set(true);\n          localKeyProcess = true;\n\n          //\n          // Refresh the side deleted from.\n          //\n          if(localCurrentCursor.pane === 'left') {\n            refreshLeftPane();\n          } else {\n            refreshRightPane();\n          }\n\n          //\n          // Remove the spinner from being checked.\n          //\n          removeSpinner('progress1');\n        }\n      });\n      updateSpinner('progress1',((key+1)/entries.length)*100);\n    });\n   \n    //\n    // It is all set up. Show the message box.\n    //\n    showMessageBox = true;\n  }\n\n  function copyEntries() {\n    var entries = getSelectedFiles();\n    var sel = true;\n    if(entries.length === 0) {\n      //\n      // Get the entry at the current cursor\n      //\n      entries.push(localCurrentCursor.entry);\n      sel = false;\n    }\n    var otherPane = localCurrentCursor.pane === 'left' ? { ...localCurrentRightFile.entry } : { ...localCurrentLeftFile.entry };\n    msgBoxConfig = {\n      title: \"Copying Entries\",\n      noShowButton: true\n    };\n    msgBoxItems = [];\n    msgBoxItems.push({\n        type: 'label',\n        name: 'msgboxMain',\n        for: 'progress1',\n        text: 'Copying ' + entries.length + ' Entries...'\n      });\n    msgBoxItems.push({\n        type: 'spinner',\n        name: 'progress1',\n        value: 1\n      });\n    msgBoxItems = msgBoxItems;\n    msgCallBack = (e) => { showMessageBox = false; };\n    addSpinner('progress1', 1);\n \n    entries.forEach((item, key, arr) => {\n      item.fileSystem.copyEntries(item, otherPane, false, (err, stdout)=>{\n        if(key >= (arr.length-1)) {\n          showMessageBox = false;\n          keyProcess.set(true);\n          localKeyProcess = true;\n\n          //\n          // Refresh the side copied to.\n          //\n          if(localCurrentCursor.pane === 'left') {\n            refreshLeftPane();\n          } else {\n            refreshRightPane();\n          }\n\n          //\n          // clear out the selections.\n          //\n          if(sel) clearSelectedFiles();\n\n          //\n          // Remove the spinner from being checked.\n          //\n          removeSpinner('progress1');\n        }\n      });\n      updateSpinner('progress1',((key+1)/entries.length)*100);\n    });\n   \n    //\n    // It is all set up. Show the message box.\n    //\n    showMessageBox = true;\n  }\n\n  async function swapPanels() {\n    var cfile = localCurrentCursor.entry.name;\n    var npane = localCurrentCursor.pane === 'left' ? 'right' : 'left';\n    tmp = localCurrentLeftFile;\n    currentLeftFile.set(localCurrentRightFile);\n    currentRightFile.set(tmp);\n    tmp = localLeftDir;\n    leftDir.set(localRightDir);\n    rightDir.set(tmp);\n    var tmp = rightEntries;\n    rightEntries = leftEntries;\n    leftEntries = tmp;\n    tick();\n    cursorToPane(npane);\n  }\n\n  function editEntry() {\n    if(localFS.fileExists(userEditor)) {\n      //\n      // There is an editor defined by the user. Use it.\n      //\n      var file = localFS.appendPath(localCurrentCursor.entry.dir, localCurrentCursor.entry.name);\n      var editor = localFS.readFile(userEditor).toString().trim();\n      if(editor.endsWith('.app')) {\n        localFS.openFileWithProgram(editor, file);\n      } else {\n        //\n        // It is a command line editor. Open specially.\n        //\n        if(editor === 'emacs') {\n          //\n          // Open emacs.\n          //\n          localFS.runCommandLine(editor + ' \"' + file + '\"');\n        } else {\n          //\n          // Open in a terminal program.\n          //\n          localFS.openInTerminal(editor, file);\n        }\n      }\n    } else {\n      //\n      // Open with the system default editor.\n      //\n      openFile(localCurrentCursor.entry);\n    }\n  }\n\n  function duplicateEntry() {\n    var newName = '';\n    if(localCurrentCursor.entry.name[0] === '.') {\n      newName = localCurrentCursor.entry.name + '-copy';\n    } else {\n      newName = localCurrentCursor.entry.name.split('.');\n      if(newName.length >= 2) {\n        newName[newName.length - 2] = newName[newName.length - 2] + '-copy';\n        newName = newName.join('.');\n      } else {\n        newName = localCurrentCursor.entry.name + \"-copy\";\n      }\n    }\n    var nEntry = { ...localCurrentCursor.entry };\n    nEntry.name = newName;\n    localCurrentCursor.entry.fileSystem.copyEntries(localCurrentCursor.entry, nEntry, true);\n    //\n    // Refresh the file list.\n    //\n    if(localCurrentCursor.pane === 'left') {\n      refreshLeftPane();\n    } else {\n      refreshRightPane();\n    }\n  }\n\n  function moveEntries() {\n    var entries = getSelectedFiles();\n    var sel = true;\n    if(entries.length === 0) {\n      //\n      // Get the entry at the current cursor\n      //\n      entries.push(localCurrentCursor.entry);\n      sel = false;\n    }\n    var otherPane = localCurrentCursor.pane === 'left' ? localCurrentRightFile.entry : localCurrentLeftFile.entry;\n    msgBoxConfig = {\n      title: \"Moving Entries\",\n      noShowButton: true\n    };\n    msgBoxItems = [];\n    msgBoxItems.push({\n        type: 'label',\n        name: 'msgboxMain',\n        for: 'progress1',\n        text: 'Moving ' + entries.length + ' Entries...'\n      });\n    msgBoxItems.push({\n        type: 'spinner',\n        name: 'progress1',\n        value: 1\n      });\n    msgBoxItems = msgBoxItems;\n    msgCallBack = (e) => { showMessageBox = false; };\n    addSpinner('progress1', 1);\n \n    entries.forEach((item, key, arr) => {\n      item.fileSystem.moveEntries(item, otherPane, (err, stdout)=>{\n        if(key >= (arr.length-1)) {\n          showMessageBox = false;\n          keyProcess.set(true);\n          localKeyProcess = true;\n\n          //\n          // Refresh both sides.\n          //\n          refreshPanes();\n\n          //\n          // clear out the selections.\n          //\n          if(sel) clearSelectedFiles();\n\n          //\n          // Remove the spinner from being checked.\n          //\n          removeSpinner('progress1');\n        }\n      });\n      updateSpinner('progress1',((key+1)/entries.length)*100);\n    });\n   \n    //\n    // It is all set up. Show the message box.\n    //\n    showMessageBox = true;\n  }\n\n  function refreshRightPane() {\n    //\n    // Refresh right pane.\n    //\n    rightEntries = localRightDir.fileSystem.getDirList(localRightDir.path);\n    var current = rightEntries[0];\n    if(rightEntries.length == 0) {\n      current = {\n        name: '',\n        dir: currentRightFile.entry.dir,\n        fileSystemType: currentRightFile.entry.fileSystemType,\n        fileSystem: currentRightFile.entry.fileSystem,\n        selected: false,\n        datetime: '',\n        type: 0,\n        size: 0,\n        stats: null\n      };\n    }\n    if(localCurrentCursor.pane == 'right') {\n      currentCursor.set({\n        entry: current,\n        pane: 'right'\n      });\n      currentRightFile.set({\n        entry: current\n      });\n    }\n  }\n\n  function refreshLeftPane() {\n    //\n    // Refresh left pane.\n    //\n    leftEntries = localLeftDir.fileSystem.getDirList(localLeftDir.path);\n    var current = leftEntries[0];\n    if(leftEntries.length === 0) {\n      current = {\n        name: '',\n        dir: currentRightFile.entry.dir,\n        fileSystemType: currentLeftFile.entry.fileSystemType,\n        fileSystem: currentLeftFile.entry.fileSystem,\n        selected: false,\n        datetime: '',\n        type: 0,\n        size: 0,\n        stats: null\n      };\n    }\n    if(localCurrentCursor.pane == 'left') {\n      currentCursor.set({\n        entry: current,\n        pane: 'left'\n      });\n      currentLeftFile.set({\n        entry: current\n      });\n    }\n  }\n\n  function refreshPanes() {\n    refreshLeftPane();\n    refreshRightPane();\n  }\n\n  function showMessage(title, msg) {\n    msgBoxConfig = {\n      title: title,\n      noShowButton: false\n    };\n    msgBoxItems = [{\n      type: 'label',\n      for: 'msgboxMain',\n      text: msg,\n      id: 'msgboxMain'\n    }];\n    showMessageBox = true;\n    msgCallBack = (e) => {};\n  }\n\n  function pickItem(title, items, returnValue) {\n    msgBoxConfig = {\n      title: title,\n      noShowButton: false\n    };\n    msgBoxItems = [{\n      type: 'picker',\n      selections: items,\n      value: items[0].value,\n      id: 'msgboxMain'\n    }];\n    showMessageBox = true;\n    msgCallBack = (e) => {\n      returnValue(e[0].value);\n      msgCallBack = (e) => {};\n    };\n  }\n\n  function askQuestion(title, question, returnValue) {\n    msgBoxConfig = {\n      title: title,\n      noShowButton: false\n    };\n    msgBoxItems = [{\n      type: 'input',\n      msg: question,\n      value: '',\n      id: 'msgboxMain'\n    }];\n    showMessageBox = true;\n    msgCallBack = (e) => {\n      returnValue(e[0].value);\n      msgCallBack = (e) => {};\n    }\n  }\n\n  function newFile() {\n    msgBoxConfig = {\n      title: \"New File Name\",\n      noShowButton: false\n    };\n    msgBoxItems = [{\n      type: 'input',\n      msg: 'What name do you want to give the new file?',\n      value: '',\n      id: 'msgboxMain'\n    }];\n    showMessageBox = true;\n    msgCallBack = newFileReturn;\n  }\n\n  function newFileReturn(data) {\n    //\n    // Setup a null callback.\n    //\n    msgCallBack = (e) => {};\n    var nfname = data[0].value;\n\n    //\n    // Create the new file.\n    //\n    var nfile = { ...localCurrentCursor.entry };\n    nfile.name = nfname;\n    localCurrentCursor.entry.fileSystem.createFile(nfile);\n\n    //\n    // Refresh the file list.\n    //\n    if(localCurrentCursor.pane === 'left') {\n      refreshLeftPane();\n    } else {\n      refreshRightPane();\n    }\n    \n    //\n    // Set the new file as the cursor point.\n    //\n    setCursor(nfname);\n  }\n\n  function newDirectory() {\n    msgBoxConfig = {\n      title: \"New Directory Name\",\n      noShowButton: false\n    };\n    msgBoxItems = [{\n      type: 'input',\n      msg: 'What name do you want to give the new directory?',\n      value: '',\n      id: 'msgboxMain'\n    }]\n\n    showMessageBox = true;\n    msgCallBack = newDirectoryReturn;\n  }\n\n  function newDirectoryReturn(data) {\n    //\n    // Setup a null callback.\n    //\n    msgCallBack = (e) => {};\n    var ndname = data[0].value;\n\n    //\n    // Create the new file.\n    //\n    var ndir = { ...localCurrentCursor.entry };\n    ndir.name = ndname;\n    localCurrentCursor.entry.fileSystem.createDir(ndir);\n\n    //\n    // Refresh the file list.\n    //\n    if(localCurrentCursor.pane === 'left') {\n      refreshLeftPane();\n    } else {\n      refreshRightPane();\n    }\n    \n    //\n    // Set the new file as the cursor point.\n    //\n    setCursor(ndname);\n  }\n\n  function renameEntry() {\n    msgBoxConfig = {\n      title: \"Rename File or Directory\",\n      noShowButton: false\n    };\n    msgBoxItems = [{\n      type: 'input',\n      msg: 'What name do you want to change to?',\n      value: localCurrentCursor.entry.name,\n      id: 'msgboxMain'\n    }];\n    showMessageBox = true;\n    msgCallBack = renameReturn;\n  }\n\n  function renameReturn(data) {\n    //\n    // Setup a null callback.\n    //\n    msgCallBack = (e) => {};\n    var nname = data[0].value;\n\n    //\n    // Create the new file.\n    //\n    var nentry = { ...localCurrentCursor.entry };\n    nentry.name = nname;\n    localCurrentCursor.entry.fileSystem.renameEntry(localCurrentCursor.entry, nentry);\n\n    //\n    // Refresh the file list.\n    //\n    if(localCurrentCursor.pane === 'left') {\n      refreshLeftPane();\n    } else {\n      refreshRightPane();\n    }\n    \n    //\n    // Set the new file as the cursor point.\n    //\n    setCursor(nname);\n  }\n\n  function clearSelectedFiles() {\n    if(localCurrentCursor.pane == 'left') {\n      //\n      // Clear the left pane's selected files\n      //\n      leftEntries = leftEntries.map(item => {\n        item.selected = false;\n        return item;\n      });\n    } else {\n      //\n      // Clear the right panes selected files\n      //\n      rightEntries = rightEntries.map(item => {\n        item.selected = false;\n        return item;\n      });\n    }\n  }\n\n  function getSelectedFiles() {\n    var selected = [];\n    if(localCurrentCursor.pane == 'left') {\n      //\n      // Get the left pane's selected files\n      //\n      selected = leftEntries.filter(item => item.selected === true);\n    } else {\n      //\n      // Get the right panes selected files\n      //\n      selected = rightEntries.filter(item => item.selected === true);\n    }\n    return(selected);\n  }\n\n  function msgReturn(e) {\n    showMessageBox = false;\n    msgCallBack(e.detail.ans);\n  }\n\n  function toggleQuickSearch() {\n    showQuickSearch = !showQuickSearch;\n  }\n\n  function qsChangeEntries(e) {\n    if(e.detail.pane === 'left') {\n      leftEntries = e.detail.entries;\n    } else {\n      rightEntries = e.detail.entries;\n    }\n    if(localCurrentCursor.pane == 'left') {\n      currentCursor.set({\n        entry: leftEntries[0],\n        pane: 'left'\n      });\n      currentLeftFile.set({\n        entry: leftEntries[0]\n      });\n    } else {\n      currentCursor.set({\n        entry: rightEntries[0],\n        pane: 'right'\n      });\n      currentRightFile.set({\n        entry: rightEntries[0]\n      });\n    }\n  }\n\n  function getCursor() {\n    return(localCurrentCursor);\n  }\n\n  function getLeftFile() {\n    return(localCurrentLeftFile);\n  }\n\n  function getRightFile() {\n    return(localCurrentRightFile);\n  }\n\n  function editDirLoc() {\n    if(localCurrentCursor.pane === 'left') {\n      setEditDirFlagLeft = true;\n    } else {\n      setEditDirFlagRight = true;\n    }\n  }\n\n  function toggleExtraPanel() {\n    showExtra = !showExtra;\n  }\n\n  function addKeyboardShort(keyboard, ctrl, shift, meta, key, cmd) {\n    stateMaps[keyboard].push({\n      ctrl: ctrl,\n      shift: shift,\n      meta: meta,\n      key: key,\n      command: cmd\n    });\n  }\n\n  function setTheme(thm) {\n    theme.set(thm);\n  }\n\n  function getTheme() {\n    return(localTheme);\n  }\n\n  function addDirectoryListener(listener) {\n    localDirListeners.push(listener);\n    directoryListeners.set(localDirListeners);\n  }\n\n  function toggleCommandPrompt() {\n    showCommandPrompt = !showCommandPrompt;\n  }\n\n  function addSpinner(name, value) {\n    msgBoxSpinners.push({\n      name: name,\n      value: value\n    });\n    msgBoxSpinners = msgBoxSpinners;\n  }\n\n  function updateSpinner(name, value) {\n    msgBoxSpinners = msgBoxSpinners.map(spinner => {\n      if(spinner.name === name) {\n        spinner.value = value;\n      }\n      return(spinner);\n    });\n  }\n\n  function removeSpinner(name) {\n    msgBoxSpinners = msgBoxSpinners.filter(spinner => spinner.name !== name);\n  }\n\n  function toggleGitHub() {\n    showGitHub = !showGitHub;\n    if(showGitHub) {\n      keyProcess.set(false);\n      localKeyProcess = false;\n    } else {\n      keyProcess.set(true);\n      localKeyProcess = true;\n    }\n  }\n\n  function setShowAllFilter() {\n    flagFilter = 0;\n    localFS.setFilter(localFS.allFilter);\n    refreshPanes();\n  }\n\n  function setDefaultFilter() {\n    flagFilter = 1;\n    localFS.setFilter(localFS.defaultFilter);\n    refreshPanes();\n  }\n\n  function toggleFilter() {\n    switch(flagFilter) {\n      case 0:\n        setDefaultFilter();\n        break;\n      case 1:\n        setShowAllFilter();\n        break;\n      default:\n        setDefaultFilter();\n        break;\n    }\n  }\n\n  function createDefaultNormalMap(keyMapDir) {\n    // \n    // There are no key map files. We need to create them.\n    // \n    let defaultNormalMap = [{\n      ctrl: false,\n      shift: true,\n      meta: false,\n      key: ':',\n      command: \"toggleCommandPrompt\"\n    },{\n      ctrl: true,\n      shift: false,\n      meta: false,\n      key: 'p',\n      command: \"toggleCommandPrompt\"\n    },{\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 's',\n      command: \"toggleExtraPanel\"\n    },{\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'q',\n      command: \"editDirLoc\"\n    },{\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'r',\n      command: \"reloadPane\"\n    },{\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'p',\n      command: \"swapPanels\"\n    },{\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'd',\n      command: \"duplicateEntry\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'e',\n      command: \"editEntry\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'm',\n      command: \"moveEntries\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'c',\n      command: \"copyEntries\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'x',\n      command: \"deleteEntries\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'g',\n      command: \"goTopFile\"\n    }, {\n      ctrl: false,\n      shift: true,\n      meta: false,\n      key: 'G',\n      command: \"goBottomFile\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'ArrowDown',\n      command: \"moveCursorDown\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'ArrowUp',\n      command: \"moveCursorUp\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'l',\n      command: \"goDownDir\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'h',\n      command: \"goUpDir\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'Enter',\n      command: \"actionEntry\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'Tab',\n      command: \"cursorToNextPane\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'k',\n      command: \"moveCursorUp\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'j',\n      command: \"moveCursorDown\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'i',\n      command: \"changeModeInsert\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'v',\n      command: \"changeModeVisual\"\n    }, {    \n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: '/',\n      command: \"toggleQuickSearch\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: '.',\n      command: \"reRunLastCommand\"\n    }, {\n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: ',',\n      command: \"toggleFilter\"\n    }, {\n      ctrl: false,\n      shift: true,\n      meta: false,\n      key: 'O',\n      command: \"openOppositePanel\"\n    }];\n    \n    // \n    // Create the directory for the keymaps if it doesn't exist.\n    //\n    if(!localFS.dirExists(keyMapDir)) localFS.createDir(keyMapDir);\n\n    //\n    // Create the default files if they don't exist.\n    //\n    localFS.writeFile(localFS.appendPath(keyMapDir, 'normalKeyMap.json'), JSON.stringify(defaultNormalMap));\n    \n    // \n    // Set the proper commands.\n    //\n    stateMaps['normal'] = processKeyMap(defaultNormalMap);\n  }\n\n  function createDefaultVisualMap(keyMapDir) {\n    let defaultVisualMap = [{\n        ctrl: false,\n      shift: true,\n      meta: false,\n      key: ':',\n      command: \"toggleCommandPrompt\"\n    },{\n        ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'k',\n      command: \"moveCursorUpWithSelect\"\n    }, {\n        ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'j',\n      command: \"moveCursorDownWithSelect\"\n    }, {\n        ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'ArrowDown',\n      command: \"moveCursorDown\"\n    }, {\n        ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'ArrowUp',\n      command: \"moveCursorUp\"\n    }, {    \n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'Escape',\n      command: \"changeModeNormal\"\n    }];\n    \n    // \n    // Create the directory for the keymaps if it doesn't exist.\n    //\n    if(!localFS.dirExists(keyMapDir)) localFS.createDir(keyMapDir);\n\n    //\n    // Create the default files if they don't exist.\n    //\n    localFS.writeFile(localFS.appendPath(keyMapDir, 'visualKeyMap.json'), JSON.stringify(defaultVisualMap));\n    \n    // \n    // Set the proper commands.\n    //\n    stateMaps['visual'] = processKeyMap(defaultVisualMap);\n  }\n  \n  function createDefaultInsertMap(keyMapDir) {\n    let defaultInsertMap = [{\n        ctrl: false,\n      shift: true,\n      meta: false,\n      key: ':',\n      command: \"toggleCommandPrompt\"\n    },{    \n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'Escape',\n      command: \"changeModeNormal\"\n    }, {    \n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'd',\n      command: \"newDirectory\"\n    }, {    \n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'f',\n      command: \"newFile\"\n    }, {    \n      ctrl: false,\n      shift: false,\n      meta: false,\n      key: 'r',\n      command: \"renameEntry\"\n    }];\n\n    // \n    // Create the directory for the keymaps if it doesn't exist.\n    //\n    if(!localFS.dirExists(keyMapDir)) localFS.createDir(keyMapDir);\n\n    //\n    // Create the default files if they don't exist.\n    //\n    localFS.writeFile(localFS.appendPath(keyMapDir, 'insertKeyMap.json'), JSON.stringify(defaultInsertMap));\n    \n    // \n    // Set the proper commands.\n    //\n    stateMaps['insert'] = processKeyMap(defaultInsertMap);\n  }\n\n  function loadKeyMaps() {\n    //\n    // Load key maps from the config directory.\n    //\n    var keyMapDir = { ...localCurrentCursor.entry };\n    keyMapDir.dir = configDir;\n    keyMapDir.name = 'keyMaps';\n\n    if(!localFS.dirExists(keyMapDir)) {\n      createDefaultNormalMap(keyMapDir);\n      createDefaultVisualMap(keyMapDir);\n      createDefaultInsertMap(keyMapDir);\n    } else {\n      // \n      // The keymap directory is there. let's load the files.\n      // \n      var fileLoc = localFS.appendPath(keyMapDir, 'normalKeyMap.json');\n      if(!localFS.fileExists(fileLoc)) {\n        createDefaultNormalMap(keyMapDir);\n      }\n      stateMaps['normal'] = processKeyMap(JSON.parse(localFS.readFile(fileLoc)));\n\n      fileLoc = localFS.appendPath(keyMapDir, 'visualKeyMap.json')\n      if(!localFS.fileExists(fileLoc)) {\n        createDefaultVisualMap(keyMapDir);\n      }\n      stateMaps['visual'] = processKeyMap(JSON.parse(localFS.readFile(fileLoc)));\n      \n      fileLoc = localFS.appendPath(keyMapDir, 'insertKeyMap.json');\n      if(!localFS.fileExists(fileLoc)) {\n        createDefaultInsertMap(keyMapDir);\n      }\n      stateMaps['insert'] = processKeyMap(JSON.parse(localFS.readFile(fileLoc)));\n    }\n  }\n\n  function processKeyMap(kmap) {\n    return kmap.map((item, index, arr) => {\n      var cmd = commands.getCommand(item.command);\n      if(typeof cmd === 'undefined') {\n        cmd = commands.getAltCommand(item.command);\n      }\n      if(typeof cmd !== 'undefined') {\n        // \n        // Found the command. Set it up.\n        //\n        item.name = item.command;\n        item.command = cmd.command;\n        return(item);\n      } else {\n        // \n        // If the command can't be found, remove it from the map.\n        //\n        delete arr[index];\n      }\n    });\n  }\n</script>\n\n",
    "<div  id=\"commandPrompt\"\n      style=\"background-color: {$theme.backgroundColor};\n             color: {$theme.textColor};\n             width: {width !== null ? width : 100}px;\n             border-color: {util.pSBC(.1,$theme.backgroundColor)};\n             max-height: {getHeight()}px;\"\n             on:blur={(e) => { exitCP(); }}\n  >\n  <input \n          type=\"text\"\n          bind:this={promptInput}\n          bind:value={promptValue}\n          style=\"width: {width !== null ? width - 20 : '100'}px; \n          background-color: {$theme.textColor};\n          text-color: {$theme.backgroundColor};\"\n          on:keydown|capture|stopPropagation={processKey}\n          on:input|stopPropagation|preventDefault={processInput}\n  />\n  {#if filtered.length > 0}\n    <div  id=\"commandlist\"\n          bind:this={panelDOM}\n          style=\"max-height: {getHeight()-20}px;\"\n    >\n      <ul>\n      {#each filtered as command, index}\n        {#if index === current}\n          <li style=\"color: {$theme.commentColor};\">\n            <p>\n              <a href=\"/\"\n                 bind:this={currentDOM}\n                 on:click|preventDefault={(e) => { runCommand(command.name); }}\n              >\n                {command.name}\n              </a>\n            </p>\n            {#if showDescription}\n              <p class='description'\n                 style=\"color: {$theme.commentColor};\"\n              >\n                {command.description}\n              </p>\n            {/if}\n          </li>\n        {:else}\n          <li>\n            <a href=\"/\"\n               on:click|preventDefault={(e) => { runCommand(command.name); }}\n            >\n              {command.name}\n            </a>\n          </li>\n        {/if}\n      {/each}\n      </ul>\n    </div>\n  {/if}\n</div> \n\n<style>\n  #commandPrompt {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    z-index: 500;\n    top: 20px;\n    left: 10px;\n    border: 3px solid;\n    border-radius: 5px;\n  }\n\n  #commandPrompt input {\n    outline-color: transparent;\n    margin: auto;\n    padding: 0px;\n    width: 100px;\n    border: 0px solid transparent;\n    margin: 10px auto;\n  }\n\n  #commandPrompt ul {\n    list-style: none;\n  }\n\n  #commandPrompt ul li a {\n    text-decoration: none;\n    color: inherit;\n  }\n\n  #commandlist {\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\n\n  .description {\n    margin: 5px 0px 10px 20px;\n  }\n</style>\n\n<script> \n  import { onMount, afterUpdate, tick, createEventDispatcher } from 'svelte';\n  import util from '../modules/util.js';\n  import { theme } from '../stores/theme.js';\n  import { keyProcess } from '../stores/keyProcess.js';\n\n  const dispatch = createEventDispatcher();\n\n  export let commands = null;\n\n  let showDescription = true;\n  let promptInput = null;\n  let promptValue = '';\n  let width = null;\n  let filtered = [];\n  let current = 0;\n  let panelDOM = null;\n  let currentDOM = null;\n\n  onMount(() => {\n    width = window.innerWidth - 30;\n    keyProcess.set(false);\n    if(commands != null) filtered = commands.commandList;\n  });\n\n  afterUpdate(async () => {\n    await tick();\n    promptInput.focus();\n  });\n  \n  async function exitCP(skip) {\n    if(typeof skip === 'undefined') skip = false;\n    await tick();\n    dispatch('closeCommandPrompt',{\n      skip: skip\n    });\n  }\n\n  async function processKey(e) {\n    // \n    // If the Enter key, quit the quick search.\n    //\n    switch(e.key) {\n      case 'Escape':\n        exitCP();\n        return(false);\n        break;\n      case 'ArrowUp': \n        current = current - 1;\n        if(current < 0) current = 0;\n        changeViewing();\n        break;\n      case 'j':\n        if(e.ctrlKey) {\n          current = current + 1;\n          if(current >= filtered.length) current = filtered.length - 1;\n          changeViewing();\n        }\n        break;\n      case 'k': \n        if(e.ctrlKey) {\n          current = current - 1;\n          if(current < 0) current = 0;\n          changeViewing();\n        }\n        break;\n      case 'ArrowDown': \n        current = current + 1;\n        if(current >= filtered.length) current = filtered.length - 1;\n        changeViewing();\n        break;\n      case 'Tab':\n        promptValue = filtered[current].name;\n        current = 0;\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n      case 'Enter':\n        e.stopPropagation();\n        e.preventDefault();\n        if(commands !== null) commands.runCommand(filtered[current].name);\n        await tick();\n        exitCP(true);\n        break;\n    }\n    return(false);\n  }\n\n  function runCommand(cmd) {\n    if(commands !== null) commands.runCommand(cmd);\n    exitCP(false);\n  }\n\n  function processInput(e) {\n    if(commands !== null) filtered = commands.commandList;\n    filtered = filtered.filter(item => item.name.toLowerCase().includes(promptValue.toLowerCase()));\n    current = 0;\n  }\n\n  function getHeight() {\n    // \n    // The height of the window minus (status line + Directory + top location)\n    //\n    return window.document.body.clientHeight - 61;\n  }\n  \n  async function changeViewing() {\n    await tick();\n    var adj = panelDOM.clientHeight / 2;\n    panelDOM.scrollTop = currentDOM.offsetTop - adj;\n    if(panelDOM.scrollTop < 0) panelDOM.scrollTop = 0;\n  }\n\n</script>\n\n",
    "<div class='dirList'\n     bind:this={dirListDOM}\n>\n  {#if show}\n    <span class='dir' \n          on:dblclick={setEdit}\n          style='color: {$theme.Green};'\n    >\n      {newPath}\n    </span>\n  {:else}\n    <input bind:this={dirInputDOM} \n           type='text' \n           class='dirinputclass' \n           on:keydown|stopPropagation={processKey}\n           on:keyup|stopPropagation={(e) => {}}\n           on:keypress|stopPropagation={(e) => {}}\n           bind:value={inputPath} \n           on:blur={editOff}\n           on:input={processInput}\n    />\n    {#if (dirlist.length > 0) && (dirListDOM !== null) && (dirInputDOM !== null)}\n      <div id=\"searchList\"\n           style=\"background-color: {localTheme.backgroundColor}; color: {localTheme.textColor}; top: {dirInputDOM.offsetTop + dirListDOM.offsetHeight}px; left: {dirListDOM.offsetLeft}px;\"\n      >\n        <ul>\n          {#each dirlist as item, key}\n            {#if item !== ''}\n              <li style=\"color: {key === dirIndex ? localTheme.selectedColor : localTheme.textColor}\">\n                {item}\n              </li>\n            {/if}\n          {/each}\n        </ul>\n      </div>\n    {/if}\n  {/if}\n</div>\n\n<style>\n  #searchList {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    z-index: 200;\n  }\n\n  #searchList ul {\n    list-style-type: none;\n    margin: 0px;\n    padding: 0px;\n  }\n\n  #searchList ul li {\n    text-decoration: none;\n    margin: 0px;\n    padding: 0px;\n  }\n\n  .dirList {\n    display: flex;\n    flex-direction: row;\n    margin: 0px;\n    padding: 0px;\n    height: 20px;\n  }\n\n  .dir {\n    height: 20px;\n    margin: 0px auto 0px 10px;\n    white-space: nowrap;\n    overflow-x: scroll;\n    direction: rtl;\n  }\n\n  .dirinputclass {\n    height: 20px;\n    margin: 0px auto 0px 10px;\n    white-space: nowrap;\n  }\n</style>\n\n<script>\n  import { tick, afterUpdate, onMount, createEventDispatcher } from 'svelte';\n  import { get } from 'svelte/store';\n  import { dirHistory } from '../stores/dirHistory.js';\n  import { keyProcess } from '../stores/keyProcess.js';\n  import { theme } from '../stores/theme.js';\n  import { directoryListeners } from '../stores/directoryListeners.js';\n  \n  const chokidar = require('chokidar');\n  const dispatch = createEventDispatcher();\n\n  export let path;\n  export let edit = false;\n\n  let show = true;\n  let dirInputDOM;\n  let newPath;\n  let inputPath;\n  let dirlist = [];\n  let localTheme = {};\n  let dirListDOM;\n  let tryagain = false;\n  let pending = false;\n  let dirIndex = 0;\n  let localDirListeners = [];\n  let watcher = null;\n\n  $: newPath = shortenPath(path);\n  $: setEditFlag(edit);\n\n  onMount(() => {\n    const unsubscribeTheme = theme.subscribe((value) => {\n      localTheme = value;\n    });\n    const unsubscribeDirectoryListeners = directoryListeners.subscribe(value => {\n      localDirListeners = value;\n    });\n    localTheme = get(theme);\n    newPath = shortenPath(path);\n    return(() => {\n      unsubscribeTheme();\n      unsubscribeDirectoryListeners();\n      if(watcher !== null) watcher.close().then(() => { \n        console.log('File watching closed.');\n      });\n    });\n  });\n\n  afterUpdate(async () => {\n    if(!show) {\n      await tick();\n      dirInputDOM.focus();\n    }\n  });\n\n  async function updateWatcher(pth) {\n    if(watcher !== null) {\n      // \n      // Clear out old watcher path and add the new one.\n      //\n      await watcher.unwatch('*');\n      watcher.add(pth);\n    } else {\n      // \n      // Create the watcher.\n      //\n      watcher = chokidar.watch(pth,{\n        persistent: true,\n        depth: 0,\n        alwaysStat: false\n      });\n\n      // \n      // Add a change handler.\n      // \n      watcher.on('all',(event, pth) => {\n        dispatch('dirChange', {\n          path: path.path,\n          cursor: false\n        });\n      });\n    }\n  }\n\n  function runDirectoryListeners(pth) {\n    localDirListeners.map(value => {\n      value(pth);\n    });\n  }\n\n  function setEditFlag(flag) {\n    if(flag) {\n      setEdit({});\n    }\n  }\n\n  function setEdit(e) {\n    show = false;\n    inputPath = path.path;\n    dirIndex = 0;\n    const sep = path.fileSystem.pathSep();\n    if(inputPath[0] !== sep) {\n      inputPath = sep + inputPath;\n    }\n    if(inputPath[inputPath.length-1] !== sep) {\n      inputPath = inputPath + sep;\n    }\n    keyProcess.set(false);\n  }\n\n  function editOff(e) {\n    if(path.fileSystem.dirExists(inputPath)) {\n      show = true;\n      dirlist = [];\n      keyProcess.set(true);\n      dispatch('dirChange', {\n        path: inputPath,\n        cursor: true\n      });\n    } else if((typeof dirlist !== 'undefined')&&(dirlist.length-1 >= dirIndex)) {\n      inputPath = dirlist[dirIndex];\n      show = true;\n      dirlist = [];\n      keyProcess.set(true);\n      if(path.fileSystem.dirExists(inputPath)) {\n        dispatch('dirChange', {\n          path: inputPath,\n          cursor: true\n        });\n      }\n    }\n  }\n\n  function shortenPath(pth) {\n    var result = pth.path;\n\n    // \n    // Make sure the filesystem is setup.\n    // \n    if(pth.fileSystem !== null) {\n      // \n      // Make sure it's a valid path.\n      //\n      if(pth.fileSystem.dirExists(result)) {\n        // \n        // Add directory watching.\n        //\n        updateWatcher(pth.path);\n\n        // \n        // Tell everyone watching directory changes that a change is occurring.\n        // \n        runDirectoryListeners(pth);\n        \n        // \n        // Add to the history.\n        // \n        var hist = get(dirHistory);\n        hist.addHistory(result);\n        dirHistory.set(hist);\n        window.dirhist = hist;\n      }\n\n      // \n      // Fixing the path.\n      //\n      if(pth.fileSystem !== null) {\n        const sep = pth.fileSystem.pathSep();\n        if(result[0] === sep) result = result.slice(1);\n        if(result[result.length-1] === sep) result = result.slice(0,-1);\n        var parts = result.split(sep);\n        if(parts.length > 3) {\n          // \n          // If the path length is greater than the shortener length, shorten the path \n          // by just showing the first character of the upper paths.\n          //\n          const boundry = parts.length - 3;\n          for(var i = 0; i < boundry; i++) {\n            parts[i] = parts[i][0];\n          }\n          result = parts.join(sep);\n        }\n        \n        // \n        // Make sure there is a path seperator on both sides of the path. Otherwise the\n        // rtl designator in the CSS will not show the path seperator for the beginning.\n        //\n        if(result[0] !== sep) result = sep + result;\n        if(result[result.length-1] !== sep) result += sep;\n      }\n    }\n\n    // \n    // Return the resulting path.\n    //\n    return(result);\n  }\n  \n  function processKey(e) {\n    const key = e.key;\n\n    // \n    // If the Enter key, quit the edit mode.\n    //\n    if((key === 'Escape')) {\n      editOff();\n    }\n\n    if(dirlist.length > 0) {\n      if(key === 'ArrowUp') {\n        e.stopPropagation();\n        dirIndex = dirIndex - 1;\n        if(dirIndex < 0) dirIndex = 0;\n      } else if(key === 'ArrowDown') {\n        e.stopPropagation();\n        dirIndex = dirIndex + 1;\n        if(dirIndex >= dirlist.length) dirIndex = dirlist.length;\n      }\n    }\n  }\n\n  function processInput(e) {\n    if(pending) {\n      tryagain = true;\n    } else {\n      if(typeof path !== 'undefined') {\n        const sep = path.fileSystem.pathSep();\n        var searchPath = inputPath;\n        if(inputPath[inputPath.length-1] !== sep) {\n          var parts = inputPath.split(sep);\n          var pat = parts[parts.length - 1];\n          searchPath = parts.slice(0, parts.length-1).join(sep);\n          var numleft = 10;\n          dirlist = [];\n\n          // \n          // Get matches from history.\n          // \n          var hist = get(dirHistory);\n          dirlist = hist.searchHistory(pat);\n          if(dirlist === null) dirlist = [];\n          numleft -= dirlist.length;\n          if(numleft > 0) {\n            // \n            // Get more from dirctory.\n            //\n            tryagain = false;\n            pending = true;\n             \n            // \n            // Get rest from file system.\n            //\n            path.fileSystem.searchDir(pat, searchPath, numleft, (data) => {\n              dirlist = dirlist.concat(data);\n              pending = false;\n              dirIndex = 0;\n              if(tryagain) {\n                processInput(null);\n              }\n            });\n          }\n        }\n      }\n    }\n  }\n</script>\n",
    "{#if ((localCursor.pane === pane) && (localCursor.entry.name == entry.name))}\n<div class='entry' \n     style=\"background-color: {localTheme.cursorColor};\"\n     on:click={cursorToEntry(pane, entry, index)}\n     on:dblclick={openEntry(pane, entry, index)}\n     bind:this={DOM}\n     draggable=\"true\"\n     on:dragstart={dragStart}\n     on:dragover={(e) => { dropFiles(e,'dragover'); }}\n     on:dragend={(e) => { dropNoPrevent(e,'dragend'); }}\n     on:drop={(e) => { dropFiles(e, 'drop'); }}\n     on:dragenter={(e) => {dropNoPrevent(e, 'dragenter'); }}\n>\n  <span class='type'>\n    {#if entry.type === 0}\n      <FaRegFileAlt />\n    {:else if entry.type === 1}\n      <FaRegFolder />\n    {:else}\n      <FaExternalLinkAlt />\n    {/if}\n  </span>\n  <span class='name' style=\"color: {entry.selected ? localTheme.selectedColor : localTheme.textColor};\">{entry.name}</span> \n</div>\n{:else }\n<div class='entry' \n     style=\"background-color: 'transparent';\"\n     on:click={cursorToEntry(pane, entry, index)}\n     on:dblclick={openEntry(pane, entry, index)}\n     bind:this={DOM}\n>\n  <span class='type'>\n    {#if entry.type === 0}\n      <FaRegFileAlt />\n    {:else if entry.type === 1}\n      <FaRegFolder />\n    {:else}\n      <FaExternalLinkAlt />\n    {/if}\n  </span>\n  <span class='name' \n        style=\"color: {entry.selected ? localTheme.selectedColor : localTheme.textColor};\"\n  >\n    {entry.name}\n  </span> \n</div>\n{/if}\n\n<style>\n  .entry {\n    display: flex;\n    flex-direction: row;\n    height: 20px;\n    max-height: 20px;\n    min-height: 20px;\n    width: 100%;\n    margin: 3px 3px;\n  }\n\n  .name {\n    white-space: nowrap;\n  }\n\n  .type {\n    height: 20px;\n    width: 20px;\n    min-height: 20px;\n    min-width: 20px;\n    max-height: 20px;\n    max-width: 20px;\n    margin: 0px 10px 0px 5px;\n  }\n</style>\n\n<script>\n  import { onMount, createEventDispatcher, tick } from 'svelte';\n  import { currentCursor } from '../stores/currentCursor.js';\n  import { theme } from '../stores/theme.js';\n  import { currentLeftFile } from '../stores/currentLeftFile.js';\n  import { currentRightFile } from '../stores/currentRightFile.js';\n  import FaRegFolder from 'svelte-icons/fa/FaRegFolder.svelte';\n  import FaRegFileAlt from 'svelte-icons/fa/FaRegFileAlt.svelte';\n  import FaExternalLinkAlt from 'svelte-icons/fa/FaExternalLinkAlt.svelte'\n\n  export let pane;\n  export let entry;\n  export let index;\n  export let utilities;\n\n  const dispatch = createEventDispatcher();\n\n  let DOM;\n  let localCursor = {\n    pane: 'right',\n    entry: {\n      name: ''\n    }\n  };\n  let localTheme = {\n    cursorColor: 'pink'\n  };\n\n  onMount(() => {\n    var unsubscribeCurrentCursor = currentCursor.subscribe(async (value) => {\n      localCursor = value;\n      await tick();\n      if(typeof localCursor.entry !== 'undefined') {\n        if(typeof localCursor.entry.name !== 'undefined') {\n          if((localCursor.pane === pane) && (localCursor.entry.name == entry.name)) { \n            var viewable = elementInViewport(DOM);\n            if(!viewable.visible) {\n              dispatch('changeViewing', {\n                dom: DOM,\n                dir: viewable.dir\n              });\n            }\n          }\n        } else {\n          localCursor.entry = {\n            name: '',\n            size: '',\n            type: 'local',\n            dir: '',\n            datetime: '',\n            selected: false\n          };\n        }\n      } else {\n        localCursor.entry = {\n          name: '',\n          size: '',\n          type: 'local',\n          dir: '',\n          datetime: '',\n          selected: false\n        };\n      }\n    });\n    var unsubscribeTheme = theme.subscribe(value => {\n      localTheme = value;\n    });\n    return(() => {\n      unsubscribeCurrentCursor();\n      unsubscribeTheme();\n    })\n  });\n\n  function elementInViewport(el) {\n    var windowInner = window.innerHeight - 31;\n    var boundingEl = el.getBoundingClientRect();\n    \n    return ({\n      visible: (boundingEl.top >= 23) && (boundingEl.bottom <= windowInner),\n      dir: (boundingEl.top < 23) ? boundingEl.top - 23 : boundingEl.bottom - windowInner\n    });\n  }\n\n  function cursorToEntry(pane, entry, index) {\n    currentCursor.set({\n      pane: pane,\n      entry: entry\n    });\n\n    if(pane === 'right') {\n      currentRightFile.set(\n        {\n          entry: entry\n        }\n      );\n    } else {\n      currentLeftFile.set(\n        {\n          entry: entry\n        }\n      )\n    }\n  }\n\n  function openEntry(pane, entry, index) {\n    if(entry.type === 0) {\n      //\n      // It is a file, open it.\n      //\n      dispatch('openFile', { entry: entry});\n    } else {\n      //\n      // It is a directory. Go into it.\n      //\n      var newDir = utilities.appendPath(entry.dir, entry.name);\n      dispatch('changeDir', {\n        path: newDir,\n        cursor: true \n      });\n    }\n  }\n\n  function dragStart(e) {\n    e.dataTransfer.dropEffect = 'copy';\n    const file = utilities.appendPath(entry.dir, entry.name);\n    e.dataTransfer.setData('text/plain', file);\n    e.dataTransfer.setData('text/uri-url', \"file://\" + file);\n    e.dataTransfer.setData(\"text/x-moz-url\", \"file://\"+file);\n    e.dataTransfer.setData(\"application/x-moz-file-promise-url\", \"file://\" + file);\n  }\n  \n  function dropFiles(e,type) {\n    e.preventDefault();\n    const dataTrans = e.dataTransfer;\n  }\n  \n  function dropNoPrevent(e,type) {\n    const dataTrans = e.dataTransfer;\n  }\n</script>\n",
    "<div id=\"extrapanel\">\n  <h6>{ fullPath }</h6>\n  {#if (extension === '.png') || (extension === '.jpg') || (extension === '.svg') || (extension === '.jpeg') || (extension === '.gif') || (extension === '.apng') || (extension === '.avif') || (extension === '.webp') || (extension === '.avi')}\n    <img src=\"file:{fullPath}\" \n         alt=\"{fullPath}\"\n    >\n  {:else if isMovieFlag}\n    <video id='videoItem'\n           controls \n    >\n      <track kind=\"captions\">\n    </video>\n    <p>\n      Dimensions:  {videoDem}\n    </p>\n  {/if}\n  <div class='stats'>\n    <p>Date: {localCurrentCursor.entry.datetime}</p>\n    <p>Size: {size}</p>\n  </div>\n</div>\n\n<style> \n  #extrapanel {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    margin: 0px;\n    padding: 5px;\n    overflow: auto;\n  }\n\n  #extrapanel img {\n    width: 100%;\n  }\n\n  .stats {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .stats p {\n    margin: 5px 0px 0px 0px;\n  }\n</style>\n\n<script>\n  import { onMount, afterUpdate, tick } from 'svelte';\n  import { currentCursor } from '../stores/currentCursor.js';\n  import util from '../modules/util.js';\n\n  let localCurrentCursor = {\n    pane: 'left',\n    entry: {}\n  };\n  let fullPath = '';\n  let extension = '';\n  let size = '';\n  let videoDem = '';\n  let isMovieFlag = false;\n\n  onMount(() => {\n    var unsubscribeCurrentCursor = currentCursor.subscribe((value) => {\n      localCurrentCursor = value;\n      fullPath = localCurrentCursor.entry.fileSystem.appendPath(localCurrentCursor.entry.dir, localCurrentCursor.entry.name);\n      extension = localCurrentCursor.entry.fileSystem.getExtension(localCurrentCursor.entry.name).toLowerCase();\n      size = util.readableSize(localCurrentCursor.entry.size);\n    });\n    return(() => {\n      unsubscribeCurrentCursor();\n    })\n  });\n  \n  afterUpdate(async () => {\n    if(isMovie()) {\n      await tick();\n      var file = new File(fullPath, localCurrentCursor.entry.name);\n      var fileURL = window.URL.createObjectURL(file);\n      var videoNode = window.document.getElementById('videoItem');\n      if(videoNode !== null) {\n        videoNode.src = fileURL;\n      }\n      getDimensions(fullPath);\n    }\n  });\n\n  function isMovie() {\n    isMovieFlag = ((extension === '.mov')  || \n                   (extension === '.mp4')  || \n                   (extension === '.wm')   ||\n                   (extension === '.3gp')  ||\n                   (extension === '.mpeg') ||\n                   (extension === '.avi')  ||\n                   (extension === '.gif')  ||\n                   (extension === '.ogg'));\n    return(isMovieFlag);\n  }\n\n  function getDimensions(fileName) {\n    var com = 'ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width \"' + fileName + '\"';\n    localCurrentCursor.entry.fileSystem.runCommandLine(com, (err, stdout, stderr) => {\n      var stdout = stdout.toString('utf8');\n      var width = /width=(\\d+)/.exec(stdout);\n      var height = /height=(\\d+)/.exec(stdout);\n      videoDem = parseInt(width[1]) + \"x\" + parseInt(height[1]);\n    });\n  }\n</script>\n",
    "<div  id='GitHub'\n      style=\"background-color: {$theme.backgroundColor};\n             border-color: {util.pSBC(.1,$theme.backgroundColor)};\n             max-height: {getHeight()}px;\n             width: {width !== null ? width : 100}px;\n             color: {$theme.textColor};\" \n      on:blur={(e) => { exitGitHub(); }}\n>\n  <div id='GitHubHeader'>\n    <h3>GitHub Themes and Extensions Importer</h3>\n    <span\n      on:click={(e) => {\n        exitGitHub();\n      }}\n      style=\"color: {$theme.Red};\"\n    >\n     X\n    </span>\n  </div>\n  <div id='GitHubList'\n       bind:this={pickerDOM}\n       on:keydown={inputChange}\n  >\n    {#await repos}\n      <h3>Loading Extensions Repositories....</h3>\n    {:then value}\n      {#if check(value)}\n        {#each value.data.items as repo}\n          <div class='repoblock'>\n            <div class='reporow'>\n              <p class='reponame'>\n                {repo.name}\n              </p>\n              <p class='repostars'\n                 style=\"color: {$theme.Yellow};\"\n              >\n                {repo.stargazers_count} ⭐️ s\n              </p>\n            </div>\n            <div class='reporow'>\n              <p class='repodisc'>\n                {repo.description}\n              </p>\n            </div>\n            {#if hasMsg(repo)}\n              <div class='reporow'\n                   style=\"color: {$theme.Red};\"\n              >\n                {@html getMsg(repo)}\n              </div>\n            {/if}\n            <div class='repobuttons'>\n              {#if extExists(repo)}\n                <button\n                  on:click={(e) => {\n                    deleteExtension(repo);\n                  }}\n                  style=\"background-color: {$theme.Red};\"\n                >\n                  Delete\n                </button>\n              {:else}\n                <button\n                  on:click={(e) => {\n                    installExtension(repo);\n                  }}\n                  style=\"background-color: {$theme.Green};\"\n                >\n                  Install\n                </button>\n              {/if}\n            </div>\n          </div>\n        {/each}\n      {/if}\n    {:catch error}\n      <h2>There was an error: {error}</h2>\n    {/await}\n    {#await themes}\n      <h3>Loading Theme Repositories....</h3>\n    {:then valueTheme}\n      {#if check(valueTheme)}\n        {#each valueTheme.data.items as thm}\n          <div class=\"repoblock\">\n            <div class='reporow'>\n              <p class='reponame'>\n                {thm.name}\n              </p>\n              <p class='repostars'\n                 style=\"color: {$theme.Yellow};\"\n              >\n                {thm.stargazers_count} ⭐️ s\n              </p>\n            </div>\n            <div class='reporow'>\n              <p class='repodisc'>\n                {thm.description}\n              </p>\n            </div>\n            {#if hasMsg(thm)}\n              <div class='reporow'\n                   style=\"color: {$theme.Red};\"\n              >\n                {@html getMsg(thm)}\n              </div>\n            {/if}\n            <div class=\"repobuttons\">\n              {#if themeExists(thm)}\n                <button\n                  on:click={(e) => {\n                    loadTheme(thm);\n                  }}\n                  style=\"background-color: {$theme.Green};\"\n                >\n                  Load\n                </button>\n                <button\n                  on:click={(e) => {\n                    deleteTheme(thm);\n                  }}\n                  style=\"background-color: {$theme.Red};\"\n                >\n                  Delete\n                </button>\n              {:else}\n                <button\n                  on:click={(e) => {\n                    installTheme(thm);\n                  }}\n                  style=\"background-color: {$theme.Green};\"\n                >\n                  Install\n                </button>\n              {/if}\n            </div>\n          </div>\n        {/each}\n      {/if}\n    {:catch error}\n      <h2>There was an error: {error}</h2>\n    {/await}\n  </div>\n</div>\n\n<style>\n  #GitHub {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    top: 20px;\n    left: 20px;\n    border: 3px solid;\n    border-radius: 3px;\n    z-index: 100;\n  }\n\n  #GitHubHeader {\n    display: flex;\n    flex-direction: row;\n    margin: 10px;\n  }\n\n  #GitHubHeader h3 {\n    margin: 0px auto 0px 0px;\n  }\n\n  #GitHubHeader span {\n    margin: 0px 0px 0px auto;\n  }\n\n  #GitHubList {\n    margin: 5px 10px;\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  .reporow {\n    display: flex;\n    flex-direction: row;\n    margin: 0px;\n  }\n\n  .reponame {\n    margin: 0px auto 0px 0px;\n  }\n\n  .repostars {\n    margin: 0px 0px 0px auto;\n  }\n\n  .repodisc {\n    margin: 0px 0px 0px 15px;\n  }\n\n  .repoblock {\n    display: flex;\n    flex-direction: column;\n    margin: 5px 0px;\n  }\n\n  .repobuttons {\n    display: flex;\n    flex-direction: row;\n    margin: 5px auto;\n  }\n\n  .repobuttons button {\n    margin: 0px 10px;\n    border-radius: 5px;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount, afterUpdate } from 'svelte';\n  import { get } from 'svelte/store';\n  import { theme } from '../stores/theme.js';\n  import { config } from '../stores/config.js';\n  import { keyProcess } from '../stores/keyProcess.js';\n  import util from '../modules/util.js';\n  import { Octokit } from \"@octokit/rest\";\n\n  const dispatch = createEventDispatcher();\n\n  var octok;\n  var repos;\n  var themes;\n  var width = null;\n  var msgs = [];\n  var pickerDOM;\n\n  onMount(() => {\n    keyProcess.set(false);\n    width = window.innerWidth - 30;\n    octok = new Octokit();\n    loadRepoInfo();\n    setTimeout(() => {\n      keyProcess.set(false);\n      if(typeof pickerDOM !== 'undefined') pickerDOM.focus();\n    }, 1000);\n  });\n\n  afterUpdate(() => {\n    if(typeof pickerDOM !== 'undefined') {\n      pickerDOM.focus();\n    }\n  });\n\n  function loadRepoInfo() {\n    if(typeof repos !== 'undefined') {\n      repos = {};\n    }\n    if(typeof themes !== 'undefined') {\n      themes = {};\n    }\n    repos = octok.search.repos({\n      q: 'topic:modalfilemanager+topic:extension'\n    });\n    themes = octok.search.repos({\n      q: 'topic:modalfilemanager+topic:theme'\n    });\n  }\n\n  function getHeight() {\n    // \n    // The height of the window minus (status line + Directory + top location)\n    //\n    return window.document.body.clientHeight - 61;\n  }\n\n  function exitGitHub() {\n    keyProcess.set(true);\n    dispatch('closeGitHub',{});\n  }\n\n  function check(val) {\n    return((typeof val !== 'undefined')&&\n           (typeof val.data !== 'undefined')&&\n           (typeof val.data.items !== 'undefined'));\n  }\n\n  function installTheme(thm) {\n    var confg = get(config);\n    var thmDir = confg.localFS.appendPath(confg.configDir,'themes');\n    thmDir = confg.localFS.appendPath(thmDir, thm.name);\n    if(!confg.localFS.dirExists(thmDir)) {\n      confg.localFS.createDir(thmDir);\n    }\n    confg.localFS.runCommandLine(\"git clone '\" + thm.git_url + \"' '\" + thmDir + \"';\", (err, stdin, stdout) => {\n      // \n      // The clone should be there. Let's load the new theme.\n      // \n      loadTheme(thm);\n      loadRepoInfo();\n    });\n  }\n\n  function loadTheme(thm) {\n    var confg = get(config);\n    var thmDir = confg.localFS.appendPath(confg.configDir,'themes');\n    thmDir = confg.localFS.appendPath(thmDir, thm.name);\n \n    if(confg.localFS.fileExists(confg.localFS.appendPath(thmDir, 'package.json'))) {\n      var manifest = JSON.parse(confg.localFS.readFile(confg.localFS.appendPath(thmDir, 'package.json')));\n      var newTheme = JSON.parse(confg.localFS.readFile(confg.localFS.appendPath(thmDir, manifest.mfmtheme.main)));\n      theme.set(newTheme);\n      addMsg(thm, \"This theme is now being used.\");\n    } else {\n      console.log(\"The theme doesn't have a package.json file.\");\n      addMsg(thm, \"The theme doesn't have a package.json file.\");\n    }\n  }\n\n  function themeExists(thm) {\n    var confg = get(config);\n    var thmDir = confg.localFS.appendPath(confg.configDir,'themes');\n    thmDir = confg.localFS.appendPath(thmDir, thm.name);\n    return(confg.localFS.dirExists(thmDir))\n  }\n\n  function deleteTheme(thm) {\n    var confg = get(config);\n    var thmDir = confg.localFS.appendPath(confg.configDir,'themes');\n    thmDir = confg.localFS.appendPath(thmDir, thm.name);\n    confg.localFS.runCommandLine('rm -Rf \"' + thmDir + '\";', (err, stdin, stdout) => {\n      loadRepoInfo();\n    })\n  }\n\n  function installExtension(ext) {\n    var confg = get(config);\n    var extDir = confg.localFS.appendPath(confg.configDir,'extensions');\n    extDir = confg.localFS.appendPath(extDir, ext.name);\n    if(!confg.localFS.dirExists(extDir)) {\n      confg.localFS.createDir(extDir);\n    }\n    confg.localFS.runCommandLine(\"git clone '\" + ext.git_url + \"' '\" + extDir + \"';\", (err, stdin, stdout) => {\n      addMsg(ext,'Restart the program to use this extension.');\n      loadRepoInfo();\n    });\n  }\n  \n  function extExists(ext) {\n    var confg = get(config);\n    var extDir = confg.localFS.appendPath(confg.configDir,'extensions');\n    extDir = confg.localFS.appendPath(extDir, ext.name);\n    return(confg.localFS.dirExists(extDir))\n  }\n  \n  function deleteExtension(ext) {\n    var confg = get(config);\n    var extDir = confg.localFS.appendPath(confg.configDir,'extensions');\n    extDir = confg.localFS.appendPath(extDir, ext.name);\n    confg.localFS.runCommandLine('rm -Rf \"' + extDir + '\";', (err, stdin, stdout) => {\n      loadRepoInfo();\n      addMsg(ext, 'Rerun the application to remove the extension from memory.');\n    });\n  }\n\n  function hasMsg(rp) {\n    if(msgs.length > 0) {\n      return(msgs.find(item => item.name === rp.name) !== 'undefined');\n    } else {\n      return(false);\n    }\n  }\n\n  function getMsg(rp) {\n    if(hasMsg(rp)) {\n      var item = msgs.find(item => item.name === rp.name);\n      if(typeof item !== 'undefined') {\n        return(item.msg);\n      } else {\n        return('');\n      }\n    } else {\n      return('');\n    }\n  }\n\n  function addMsg(rp,msg) {\n    msgs.push({\n      name: rp.name,\n      msg: msg\n    });\n    msgs = msgs;\n    themes = themes;\n    repos = repos;\n  }\n  \n  function inputChange(e) {\n    console.log('GitHub key Processing...');\n    \n    if((e.key === 'ArrowUp')||(e.key === 'k')) {\n      // \n      // Go up the list. Zero is at the top.\n      //\n      scrollDOM(-1);\n    } else if((e.key === 'ArrowDown')||(e.key === 'j')) {\n      // \n      // Go down the list. The largest index is at the bottom.\n      //\n      scrollDOM(1);\n    } else if(e.key === 'Escape') {\n      //\n      // Escape key. Just exit without doing anything.\n      //\n      exitGitHub();\n    }\n  } \n\n  function scrollDOM(amount) {\n    var adj = amount * 20;\n\n    if(pickerDOM !== null) {\n      pickerDOM.scrollTop += adj;\n      if(pickerDOM.scrollTop < 0) pickerDOM.scrollTop = 0;\n      if(pickerDOM.scrollTop > pickerDOM.clientHeight) pickerDOM.scrollTop = pickerDOM.clientHeight;\n    }\n  }\n</script>\n\n",
    "<div id='messageboxbg'>\n  <div id='messagebox'\n       style=\"background-color: {$theme.backgroundColor};\n              border-color: {util.pSBC(.1,$theme.backgroundColor)};\n              color: {$theme.textColor};\" \n  >\n    {#if config !== null}\n      <h2>{config.title}</h2>\n      {#if typeof items !== null}\n        {#each items as item}\n          {#if typeof item !== 'undefined'}\n            {#if item.type === 'input'}\n              <p>{item.msg}</p>\n              <input type=\"text\" \n                     id=\"{item.id}\"\n                     bind:value={item.value}\n                     on:keydown={(e) => {\n                      if(e.key === 'Enter') {\n                        e.preventDefault();\n                        returnValue(true);\n                      }\n                     }}\n              />\n            {:else if item.type === 'selector'}\n              <select\n                id=\"{item.id}\"\n                bind:value={item.value}\n              >\n                {#each item.selections as selection}\n                  <option\n                    value={selection.value}\n                  >\n                    {selection.name}\n                  </option>\n                {/each}\n              </select>\n            {:else if item.type === 'picker'}\n              <div\n                id='pickerDiv'\n              >\n                <input\n                  id=\"{item.id}\"\n                  bind:value={pickerValue}\n                  on:keydown|preventDefault={pickerInputChange}\n                >\n                <div\n                  id=\"{item.id}picker\"\n                  class=\"picker\"\n                  bind:this={pickerDOM}\n                >\n                  {#each pickerItems as selection, key }\n                    {#if key === pickerNum }\n                      <a \n                        href=\"/#\"\n                        style=\"color: {$theme.backgroundColor};\n                               background-color: {$theme.textColor};\"\n                        class=\"pickerSelected\"\n                        on:click|preventDefault={(e) => {\n                          pickerSelected(selection);\n                        }}\n                      >\n                        {selection.name}\n                      </a>\n                    {:else}\n                      <a \n                        href=\"/#\"\n                        style=\"background-color: {$theme.backgroundColor};\n                               color: {$theme.textColor};\"\n                        on:click|preventDefault={(e) => {\n                          pickerSelected(selection);\n                        }}\n                      >\n                        {selection.name}\n                      </a>\n                    {/if}\n                  {/each}\n                </div>\n              </div>\n            {:else if item.type === 'spinner'}\n              <progress\n                id={item.name}\n                value={item.value}\n                max=\"100\"\n              />\n            {:else if item.type === 'label'}\n              <label\n                id={item.id}\n                for={item.for}\n              >\n                {item.text}\n              </label>\n            {/if}\n          {:else}\n            <p>System Error</p>\n          {/if}\n        {/each}\n      {:else}\n        <p>System Error</p>\n      {/if}\n      {#if ((typeof config.noShowButton !== 'undefined')&&(!config.noShowButton))}\n        <div id='butRow'>\n          <button on:click={(e) => { returnValue(false); }} >\n            Okay\n          </button>\n          <button on:click={cancel} >\n            Cancel\n          </button>\n        </div>\n      {/if}\n    {/if}\n  </div>\n</div>\n\n<style>\n  #messageboxbg {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    height: 100%;\n    width: 100%;\n    background-color: transparent;\n    z-index: 100;\n  }\n\n  #messagebox {\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n    padding: 10px;\n    width: 70%;\n    border: 3px solid;\n    border-radius: 5px;\n  }\n\n  #butRow {\n    display: flex;\n    flex-direction: row;\n  }\n\n  #butRow button:first-child {\n    margin: auto 10px auto auto;\n    border-radius: 5px;\n  }\n  \n  #butRow button:last-child {\n    margin: auto auto auto 10px;\n    border-radius: 5px;\n  }\n\n  #pickerDiv input {\n    width: 100%\n  }\n\n  .picker {\n    display: flex;\n    flex-direction: column;\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\n\n  .picker a {\n    text-decoration: none;\n  }\n\n  .pickerSelected {\n    text-decoration: none;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount, afterUpdate, tick } from 'svelte';\n  import util from '../modules/util.js';\n  import { theme } from '../stores/theme.js';\n  import { keyProcess } from '../stores/keyProcess.js';\n\n  const dispatch = createEventDispatcher();\n\n  export let config = null;\n  export let items = null;\n  export let spinners = [];\n\n  let pickerNum = 0;\n  let pickerItems = [];\n  let pickerItemsOrig = [];\n  let pickerValue = \"\";\n  let pickerDOM;\n\n  $: items = updateSpinners(spinners);\n  $: updateItems(items);\n  $: updateHeight(pickerDOM);\n\n  onMount(() => {\n    //\n    // Turn off key processing.\n    //\n    keyProcess.set(false);\n\n    //\n    // Return a function to be called when this component no longer\n    // is being shown.\n    //\n    return(() => {\n      keyProcess.set(true);\n    })\n  });\n\n  afterUpdate(async () => {\n    await tick();\n    var main = window.document.getElementById('msgboxMain');\n    if(main !== null) main.focus();\n  });\n\n  function updateSpinners(spins) {\n    if((items !== null)&&((typeof spins.length !== 'undefined')||(spins !== null))&&(spins.length > 0)) {\n      items = items.map(item => {\n        if(item.type === 'spinner') {\n          const nval = spins.find(spitem => spitem.name === item.name);\n          if(nval !== 'undefined') item.value = nval.value;\n        }\n        return(item);\n      });\n    }\n    return(items);\n  }\n\n  function returnValue(skip) {\n    if(typeof skip === 'undefined') skip = false;\n    keyProcess.set(true);\n    if(pickerItems.length > 0) items[0].value = pickerItems[pickerNum].value;\n    dispatch('msgReturn', {\n      ans: items\n    });\n    dispatch('closeMsgBox',{\n      skip: skip\n    });\n  }\n\n  function cancel(e) {\n    var skip = false;\n    keyProcess.set(true);\n    dispatch('closeMsgBox',{\n      skip:skip\n    });\n  }\n\n  function updateHeight(dom) {\n    if(typeof dom !== 'undefined') {\n      dom.style.maxHeight = new Number(document.body.clientHeight - 200).toString() + 'px';\n    }\n  }\n\n  function pickerInputChange(e) {\n    if(e.key === 'ArrowUp') {\n      // \n      // Go up the list. Zero is at the top.\n      //\n      movePickerBar(-1);\n    } else if(e.key === 'ArrowDown') {\n      // \n      // Go down the list. The largest index is at the bottom.\n      //\n      movePickerBar(1);\n    } else if(e.key === 'Escape') {\n      //\n      // Escape key. Just exit without doing anything.\n      //\n      keyProcess.set(true);\n      dispatch('closeMsgBox',{\n        skip: false\n      });\n    } else if(((e.which >= 48)&&(e.which <= 90))||(e.which >= 186)||(e.which === 32)) {\n      // \n      // It's a normal printable character. Add it and re-evaluate.\n      //\n      pickerValue += e.key;\n      var cur = pickerValue.toLowerCase();\n      pickerItems = pickerItemsOrig.filter( it => it.name.toLowerCase().includes(cur));\n      movePickerBar(0);\n    } else if(e.keyCode === 8) {\n      pickerValue = pickerValue.slice(0, pickerValue.length-1);\n      var cur = pickerValue.toLowerCase();\n      pickerItems = pickerItemsOrig.filter( it => it.name.toLowerCase().includes(cur));\n      movePickerBar(0);\n    } else if(e.which === 13) {\n      //\n      // Enter key. Take the highlighted value and return.\n      //\n      keyProcess.set(true);\n      dispatch('msgReturn', {\n        ans: [{\n          type: 'picker',\n          value: pickerItems[pickerNum].value\n        }]\n      });\n      dispatch('closeMsgBox',{\n        skip: true\n      });\n    }\n  } \n\n  function pickerSelected(sel) {\n    //\n    // Enter key. Take the highlighted value and return.\n    //\n    keyProcess.set(true);\n    dispatch('msgReturn', {\n      ans: [{\n        type: 'picker',\n        value: sel.value\n      }]\n    });\n    dispatch('closeMsgBox',{\n      skip: true\n    });\n  }\n\n  function updateItems(itms) {\n    itms.forEach(itm => {\n      if(itm.type === 'picker') {\n        pickerItems = itm.selections;\n        pickerItemsOrig = itm.selections;\n      }\n    })\n  }\n  \n  function movePickerBar(amount) {\n    pickerNum = pickerNum + amount;\n    if(pickerNum > pickerItems.length - 1) pickerNum = pickerItems.length - 1;\n    if(pickerNum < 0) pickerNum = 0;\n    \n    if(pickerDOM !== null) {\n      var itemDOM = window.document.body.getElementsByClassName('pickerSelected')[0];\n      var cur = pickerNum * itemDOM.clientHeight;\n      var curP1 = (pickerNum + 1) * itemDOM.clientHeight;\n      if(pickerDOM.clientHeight < cur) pickerDOM.scrollTop += itemDOM.clientHeight; \n      if((pickerDOM.clientTop+pickerDOM.clientHeight) < curP1) pickerDOM.scrollTop += itemDOM.clientHeight;\n      if(pickerDOM.scrollTop > cur) pickerDOM.scrollTop = cur;\n      if(pickerDOM.scrollTop < 0) DOM.scrollTop = 0;\n    }\n  }\n</script>\n\n",
    "<div class='panel'\n     bind:this={DOM}\n>\n  {#each entries as entry,index}\n    <Entry \n      pane={pane} \n      index={index}\n      entry={entry}\n      utilities={utilities}\n      on:changeDir={changeDir}\n      on:openFile={openFile}\n      on:changeViewing={changeViewingDOM}\n    />\n  {:else}\n    <div class=\"empty\"></div>\n  {/each}\n</div>\n\n<style>\n  .panel {\n    display: flex;\n    flex-direction: column;\n    padding: 0px;\n    margin: 0px;\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\n\n  .empty {\n    height: 0px;\n    width: 0px;\n    visibility: hidden;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  import Entry from './Entry.svelte';\n\n  export let pane = 'left';\n  export let entries = [];\n  export let utilities;\n\n  const dispatch = createEventDispatcher();\n\n  let DOM;\n\n  function changeDir(e) {\n    dispatch('changeDir', {\n      dir: e.detail,\n      pane: pane\n    });\n  }\n\n  function openFile(e) {\n    dispatch('openFile', e.detail);\n  }\n\n  function changeViewingDOM(e) {\n    var elDOM = e.detail;\n    if(elDOM !== null) {\n      DOM.scrollTop += elDOM.dir;\n      if(DOM.scrollTop < 0) DOM.scrollTop = 0;\n    }\n  }\n</script>\n",
    "<div id=\"quickSearch\" \n     style=\"left: {position}px;\" \n>\n  <input type='text' \n         bind:this={qsInputDOM}\n         bind:value={qsInput} \n         on:keydown={processKey}\n         on:input={processInput}\n         on:blur={(e) => { exitQS(); }}\n         style=\"background-color: {localTheme.textColor};\n                text-color: {localTheme.backgroundColor};\"\n  />\n</div>\n\n<style>\n  #quickSearch {\n    position: absolute;\n    display: flex;\n    flex-direction: row;\n    margin: 0px;\n    padding: 0px;\n    border: 0px solid transparent;\n    height: 30px;\n    max-height: 30px;\n    min-height: 30px;\n    width: 100px;\n    max-width: 100px;\n    min-width: 100px;\n    bottom: 0px;\n    z-index: 100;\n    user-select: none;\n    text-decoration: none;\n  }\n\n  #quickSearch input {\n    outline-color: transparent;\n    margin: auto;\n    padding: 0px;\n    width: 100px;\n    border: 3px solid transparent;\n    border-radius: 5px;\n  }\n</style>\n\n<script> \n  import { onMount, beforeUpdate, createEventDispatcher, afterUpdate } from 'svelte';\n  import { get } from 'svelte/store';\n  import { currentCursor } from '../stores/currentCursor.js';\n  import { theme } from '../stores/theme.js';\n  import { keyProcess } from '../stores/keyProcess.js';\n\n  const dispatch = createEventDispatcher();\n\n  export let rightDOM;\n  export let leftDOM;\n  export let leftEntries;\n  export let rightEntries;\n\n  let qsInput = '';\n  let qsInputDOM = null;\n  let cursor = null;\n  let localTheme = null;\n  let position = null;\n  let origEntries = null;\n\n  beforeUpdate(() => {\n    if(cursor === null) {\n      getDefaults();\n    }\n  });\n\n  afterUpdate(() => {\n    if(qsInputDOM !== null) {\n      qsInputDOM.focus();\n    }\n  })\n\n  onMount(() => {\n    if(cursor.pane === 'left') {\n      position = leftDOM.clientWidth - 100;\n    } else {\n      position = rightDOM.clientWidth + leftDOM.clientWidth - 85;\n    }\n  });\n\n  function getDefaults() {\n    cursor = get(currentCursor);\n    localTheme = get( theme );\n    keyProcess.set(false);\n    origEntries = usingEntry(leftEntries, rightEntries);\n  }\n\n  function usingEntry(leftE, rightE) {\n    if(cursor.pane === 'left') {\n      return(leftE);\n    } else {\n      return(rightE);\n    }\n  }\n\n  function exitQS(skip) {\n    if(typeof skip === 'undefined') skip = false;\n    cursor = null;\n    dispatch('closeQuickSearch',{\n      skip: skip\n    });\n  }\n\n  function processKey(e) {\n    const key = e.key;\n\n    // \n    // If the Enter key, quit the quick search.\n    //\n    if(key === 'Escape') {\n      e.preventDefault();\n      exitQS(false);\n    } else if(key === 'Enter') {\n      e.preventDefault();\n      exitQS(true);\n    }\n  }\n\n  function processInput(e) {\n    if(cursor === null) {\n      getDefaults();    \n    }\n\n    //\n    // filter the entries by the quick search ignoring case.\n    // \n    var entries = origEntries;\n    entries = entries.filter(item => item.name.toLowerCase().includes(qsInput.toLowerCase()));\n\n    // \n    // Send to the panel only if there are some entries to see.\n    // \n    if(entries.length > 0) {\n      dispatch('changeEntries', {\n        pane: cursor.pane,\n        entries: entries\n      });\n    }\n  }\n</script>\n",
    "<div id='resizeBorder'\n     style=\"padding: 0px; \n            margin: 0px;\n            width: 10px;\n            max-width: 10px;\n            min-width: 10px;\n            border-left: 3px solid {localTheme.borderColor};\n            border-right: 3px solid {localTheme.borderColor};\"\n      on:mousedown={e => {\n        dispatch('mouseDown', true);\n      }}\n      on:mouseup={e => {\n        dispatch('mouseDown', false);\n      }}\n>\n</div>\n\n<style>\n  #resizeBorder {\n    display: flex;\n    flex-direction: row;\n    height: auto;\n    cursor: ew-resize;\n  }\n</style>\n\n<script>\n  import { onMount, createEventDispatcher } from \"svelte\";\n  import { theme } from '../stores/theme.js';\n\n  const dispatch = createEventDispatcher();\n  \n  let localTheme = {};\n\n  onMount(() => {\n    var unsubscribeTheme = theme.subscribe(value => {\n      localTheme = value;\n    });\n    return(() => {\n      unsubscribeTheme();\n    })\n  });\n</script>\n",
    "<div id='statusLine' style='padding: 0px; \n                      margin: 0px; \n                      border-top: 3px solid {$theme.borderColor};'>\n  <span class='state' \n        style='color: \"black\"; background-color: {stateColor};'\n  >\n    {localInputState}\n  </span>\n  <span class='pane'\n        style='color: {$theme.Cyan}; background-color: {$theme.backgroundColor};'\n  >\n    {localCurrentCursor.pane}\n  </span>\n  <span class='file customdata' \n        style='color: {$theme.color}; background-color: {$theme.backgroundColor};'\n        data-tooltip='{localCurrentCursor.entry.name}' \n  >\n    {localCurrentCursor.entry.name}\n  </span>\n  <span class='file customdata'\n        style='color: {$theme.Orange}; background-color: {$theme.backgroundColor};'\n        data-tooltip='{localCurrentCursor.entry.datetime}' \n  >\n    {localCurrentCursor.entry.datetime}\n  </span>\n  <span class='file'\n        style='color: {$theme.Green}; \n               background-color: {$theme.backgroundColor};\n               flex-grow: 2;'\n  >\n    {size}\n  </span>\n</div>\n\n<style>\n  #statusLine {\n    display: flex;\n    flex-direction: row;\n    flex-grow: 0;\n    margin: 0px;\n    padding: 0px;\n    width: 100%;\n    min-height: 31px;\n    height: 31px;\n    max-height: 31px;\n    position: fixed;\n    bottom: 0px;\n    left: 0px;\n  }\n\n  .pane {\n    margin: 0px;\n    padding: 5px 5px 5px 10px;\n    width: 35px;\n    min-width: 50px;\n  }\n\n  .state {\n    margin: 0px;\n    padding: 5px 10px 5px 10px;\n    color: black;\n    min-width: 50px;\n  }\n\n  .file {\n    margin: 0px;\n    padding: 5px 10px 5px 5px;\n    min-width: 50px;\n    overflow: hidden;\n    white-space: nowrap;\n  }\n\n  span.customdata {\n    position: relative ;\n  }\n\n  span.customdata:hover::before {\n    content: attr(data-tooltip);\n    background-color: inherit;\n    color: inherit;\n    position: fixed;\n    bottom: 2em;\n    min-width: 20px;\n    border: 1px #808080 solid;\n    padding: 8px;\n    z-index: 1;\n  } \n</style>\n\n<script>\n  import { onMount } from \"svelte\";\n  import { theme } from '../stores/theme.js';\n  import { currentCursor } from '../stores/currentCursor.js';\n  import { inputState } from '../stores/inputState.js';\n  import { stateMapColors } from '../stores/stateMapColors.js';\n\n  import util from '../modules/util.js';\n\n  let localInputState = \"normal\";\n  let localCurrentCursor = {\n    entry: {\n      name: 'test.txt',\n      size: '',\n      datetime: ''\n    },\n    pane: ''\n  };\n  let localStateMapColors = [];\n  let stateColor = \"#6fb1e9\";\n  let size = 0;\n\n  onMount(() => {\n    //\n    // Here, we are subscribing to the different stores and setting their \n    // default values;\n    //\n    var unSubscribeInputState = inputState.subscribe(value => {\n      localInputState = value;\n      stateColor = localStateMapColors[localInputState];\n    })\n    var unSubscribeCurrentCursor = currentCursor.subscribe(value => {\n      localCurrentCursor = value;\n      if(typeof value.entry === 'undefined') {\n        localCurrentCursor = {\n          entry: {\n            name: '',\n            size: '',\n            datetime: ''\n          },\n          pane: localCurrentCursor.pane\n        }\n        size = '';\n      } else {\n        size = util.readableSize(localCurrentCursor.entry.size);\n      }\n    });\n    var unSubscribeStateMapColors = stateMapColors.subscribe( value => {\n      localStateMapColors = value;\n      stateColor = localStateMapColors[localInputState];\n    })\n    return(() => {\n      unSubscribeCurrentCursor();\n      unSubscribeInputState();\n      unSubscribeStateMapColors();\n    })\n  });\n</script>\n\n"
  ],
  "names": [],
  "mappings": "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"
}