var extensions={fileSystems:null,commands:null,extCommandList:[],extensionList:[],extensionDir:"",localFS:null,load:function(n){extensions.localFS=n;try{for(var e=extensions.localFS.readDir(extensions.extensionDir),t=0;t<e.length;t++){const n=extensions.localFS.appendPath(extensions.extensionDir,e[t]);try{if(extensions.localFS.getStats(n).isDirectory()){const e=extensions.localFS.appendPath(n,"package.json");if(extensions.localFS.fileExists(e)){const t=JSON.parse(extensions.localFS.readFile(e).toString());if(void 0!==t.mfmextension){const e=extensions.localFS.loadJavaScript(extensions.localFS.appendPath(n,t.mfmextension.main));null!==e?extensions.addExtension(t.mfmextension.name,t.mfmextension.description,e,t.mfmextension.type,t.mfmextension.github):console.log("Extension didn't load.")}else console.log("Extension: "+n+" isn't configured correctly.")}}}catch(n){console.log(n)}}}catch(n){}},setExtensionDir:function(n){extensions.extensionDir=n},getExtensionDir:function(){return extensions.extensionDir},setFileSystems:function(n){extensions.fileSystems=n},getFileSystems:function(){return extensions.fileSystems},setCommands:function(n){extensions.commands=n},getCommands:function(){return extensions.commands},addExtCommand:function(n,e,t){extensions.extCommandList.push({name:n,description:e,command:t})},listExtCommands:function(){return extensions.extCommandList.map(n=>({name:n.name,description:n.description}))},getExtCommand:function(n){return extensions.extCommandList.find(e=>e.name===n)},addExtension:function(n,e,t,s,i){extensions.extensionList.push({name:n,description:e,extension:t,type:s,github:i})},init:function(){null!==extensions.extensionList&&extensions.extensionList.forEach(n=>{void 0!==n.extension&&n.extension.init(extensions)})},installKeyMaps:function(){null!==extensions.extensionList&&extensions.extensionList.forEach(n=>{void 0!==n.extension&&n.extension.installKeyMaps()})},getExtension:function(n){return extensions.extensionList.find(n=>{n.name})},listExtensions:function(){return extensions.extensionList.map(n=>({name:n.name,description:n.description}))},removeExtension:function(n){extensions.extensionList=extensions.extensionList.filter(e=>e.name!=n)},getLocalFS:function(){return extensions.localFS}};export default extensions;